// Code generated by MockGen. DO NOT EDIT.
// Source: /home/nitzan/go/pkg/mod/github.com/heroiclabs/nakama@v2.3.2+incompatible/runtime/runtime.go

// Package mock_runtime is a generated GoMock package.
package mocks

import (
	context "context"
	sql "database/sql"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	api "github.com/heroiclabs/nakama/api"
	rtapi "github.com/heroiclabs/nakama/rtapi"
	x "github.com/heroiclabs/nakama/runtime"
)

// MockLogger is a mock of Logger interface
type MockLogger struct {
	ctrl     *gomock.Controller
	recorder *MockLoggerMockRecorder
}

// MockLoggerMockRecorder is the mock recorder for MockLogger
type MockLoggerMockRecorder struct {
	mock *MockLogger
}

// NewMockLogger creates a new mock instance
func NewMockLogger(ctrl *gomock.Controller) *MockLogger {
	mock := &MockLogger{ctrl: ctrl}
	mock.recorder = &MockLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLogger) EXPECT() *MockLoggerMockRecorder {
	return m.recorder
}

// Debug mocks base method
func (m *MockLogger) Debug(format string, v ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{format}
	for _, a := range v {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Debug", varargs...)
}

// Debug indicates an expected call of Debug
func (mr *MockLoggerMockRecorder) Debug(format interface{}, v ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{format}, v...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debug", reflect.TypeOf((*MockLogger)(nil).Debug), varargs...)
}

// Info mocks base method
func (m *MockLogger) Info(format string, v ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{format}
	for _, a := range v {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Info", varargs...)
}

// Info indicates an expected call of Info
func (mr *MockLoggerMockRecorder) Info(format interface{}, v ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{format}, v...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockLogger)(nil).Info), varargs...)
}

// Warn mocks base method
func (m *MockLogger) Warn(format string, v ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{format}
	for _, a := range v {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Warn", varargs...)
}

// Warn indicates an expected call of Warn
func (mr *MockLoggerMockRecorder) Warn(format interface{}, v ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{format}, v...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Warn", reflect.TypeOf((*MockLogger)(nil).Warn), varargs...)
}

// Error mocks base method
func (m *MockLogger) Error(format string, v ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{format}
	for _, a := range v {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Error", varargs...)
}

// Error indicates an expected call of Error
func (mr *MockLoggerMockRecorder) Error(format interface{}, v ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{format}, v...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockLogger)(nil).Error), varargs...)
}

// Print mocks base method
func (m *MockLogger) Print(v ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range v {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Print", varargs...)
}

// Print indicates an expected call of Print
func (mr *MockLoggerMockRecorder) Print(v ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Print", reflect.TypeOf((*MockLogger)(nil).Print), v...)
}

// Println mocks base method
func (m *MockLogger) Println(v ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range v {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Println", varargs...)
}

// Println indicates an expected call of Println
func (mr *MockLoggerMockRecorder) Println(v ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Println", reflect.TypeOf((*MockLogger)(nil).Println), v...)
}

// Printf mocks base method
func (m *MockLogger) Printf(format string, v ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{format}
	for _, a := range v {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Printf", varargs...)
}

// Printf indicates an expected call of Printf
func (mr *MockLoggerMockRecorder) Printf(format interface{}, v ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{format}, v...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Printf", reflect.TypeOf((*MockLogger)(nil).Printf), varargs...)
}

// Fatal mocks base method
func (m *MockLogger) Fatal(v ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range v {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Fatal", varargs...)
}

// Fatal indicates an expected call of Fatal
func (mr *MockLoggerMockRecorder) Fatal(v ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fatal", reflect.TypeOf((*MockLogger)(nil).Fatal), v...)
}

// Fatalln mocks base method
func (m *MockLogger) Fatalln(v ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range v {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Fatalln", varargs...)
}

// Fatalln indicates an expected call of Fatalln
func (mr *MockLoggerMockRecorder) Fatalln(v ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fatalln", reflect.TypeOf((*MockLogger)(nil).Fatalln), v...)
}

// Fatalf mocks base method
func (m *MockLogger) Fatalf(format string, v ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{format}
	for _, a := range v {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Fatalf", varargs...)
}

// Fatalf indicates an expected call of Fatalf
func (mr *MockLoggerMockRecorder) Fatalf(format interface{}, v ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{format}, v...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fatalf", reflect.TypeOf((*MockLogger)(nil).Fatalf), varargs...)
}

// Panic mocks base method
func (m *MockLogger) Panic(v ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range v {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Panic", varargs...)
}

// Panic indicates an expected call of Panic
func (mr *MockLoggerMockRecorder) Panic(v ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Panic", reflect.TypeOf((*MockLogger)(nil).Panic), v...)
}

// Panicln mocks base method
func (m *MockLogger) Panicln(v ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range v {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Panicln", varargs...)
}

// Panicln indicates an expected call of Panicln
func (mr *MockLoggerMockRecorder) Panicln(v ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Panicln", reflect.TypeOf((*MockLogger)(nil).Panicln), v...)
}

// Panicf mocks base method
func (m *MockLogger) Panicf(format string, v ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{format}
	for _, a := range v {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Panicf", varargs...)
}

// Panicf indicates an expected call of Panicf
func (mr *MockLoggerMockRecorder) Panicf(format interface{}, v ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{format}, v...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Panicf", reflect.TypeOf((*MockLogger)(nil).Panicf), varargs...)
}

// MockInitializer is a mock of Initializer interface
type MockInitializer struct {
	ctrl     *gomock.Controller
	recorder *MockInitializerMockRecorder
}

// MockInitializerMockRecorder is the mock recorder for MockInitializer
type MockInitializerMockRecorder struct {
	mock *MockInitializer
}

// NewMockInitializer creates a new mock instance
func NewMockInitializer(ctrl *gomock.Controller) *MockInitializer {
	mock := &MockInitializer{ctrl: ctrl}
	mock.recorder = &MockInitializerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockInitializer) EXPECT() *MockInitializerMockRecorder {
	return m.recorder
}

// RegisterRpc mocks base method
func (m *MockInitializer) RegisterRpc(id string, fn func(context.Context, x.Logger, *sql.DB, x.NakamaModule, string) (string, error)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterRpc", id, fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterRpc indicates an expected call of RegisterRpc
func (mr *MockInitializerMockRecorder) RegisterRpc(id, fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterRpc", reflect.TypeOf((*MockInitializer)(nil).RegisterRpc), id, fn)
}

// RegisterBeforeRt mocks base method
func (m *MockInitializer) RegisterBeforeRt(id string, fn func(context.Context, x.Logger, *sql.DB, x.NakamaModule, *rtapi.Envelope) (*rtapi.Envelope, error)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterBeforeRt", id, fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterBeforeRt indicates an expected call of RegisterBeforeRt
func (mr *MockInitializerMockRecorder) RegisterBeforeRt(id, fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterBeforeRt", reflect.TypeOf((*MockInitializer)(nil).RegisterBeforeRt), id, fn)
}

// RegisterAfterRt mocks base method
func (m *MockInitializer) RegisterAfterRt(id string, fn func(context.Context, x.Logger, *sql.DB, x.NakamaModule, *rtapi.Envelope) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterAfterRt", id, fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterAfterRt indicates an expected call of RegisterAfterRt
func (mr *MockInitializerMockRecorder) RegisterAfterRt(id, fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterAfterRt", reflect.TypeOf((*MockInitializer)(nil).RegisterAfterRt), id, fn)
}

// RegisterMatchmakerMatched mocks base method
func (m *MockInitializer) RegisterMatchmakerMatched(fn func(context.Context, x.Logger, *sql.DB, x.NakamaModule, []x.MatchmakerEntry) (string, error)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterMatchmakerMatched", fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterMatchmakerMatched indicates an expected call of RegisterMatchmakerMatched
func (mr *MockInitializerMockRecorder) RegisterMatchmakerMatched(fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterMatchmakerMatched", reflect.TypeOf((*MockInitializer)(nil).RegisterMatchmakerMatched), fn)
}

// RegisterMatch mocks base method
func (m *MockInitializer) RegisterMatch(name string, fn func(context.Context, x.Logger, *sql.DB, x.NakamaModule) (x.Match, error)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterMatch", name, fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterMatch indicates an expected call of RegisterMatch
func (mr *MockInitializerMockRecorder) RegisterMatch(name, fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterMatch", reflect.TypeOf((*MockInitializer)(nil).RegisterMatch), name, fn)
}

// RegisterTournamentEnd mocks base method
func (m *MockInitializer) RegisterTournamentEnd(fn func(context.Context, x.Logger, *sql.DB, x.NakamaModule, *api.Tournament, int64, int64) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterTournamentEnd", fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterTournamentEnd indicates an expected call of RegisterTournamentEnd
func (mr *MockInitializerMockRecorder) RegisterTournamentEnd(fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterTournamentEnd", reflect.TypeOf((*MockInitializer)(nil).RegisterTournamentEnd), fn)
}

// RegisterTournamentReset mocks base method
func (m *MockInitializer) RegisterTournamentReset(fn func(context.Context, x.Logger, *sql.DB, x.NakamaModule, *api.Tournament, int64, int64) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterTournamentReset", fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterTournamentReset indicates an expected call of RegisterTournamentReset
func (mr *MockInitializerMockRecorder) RegisterTournamentReset(fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterTournamentReset", reflect.TypeOf((*MockInitializer)(nil).RegisterTournamentReset), fn)
}

// RegisterLeaderboardReset mocks base method
func (m *MockInitializer) RegisterLeaderboardReset(fn func(context.Context, x.Logger, *sql.DB, x.NakamaModule, x.Leaderboard, int64) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterLeaderboardReset", fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterLeaderboardReset indicates an expected call of RegisterLeaderboardReset
func (mr *MockInitializerMockRecorder) RegisterLeaderboardReset(fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterLeaderboardReset", reflect.TypeOf((*MockInitializer)(nil).RegisterLeaderboardReset), fn)
}

// RegisterBeforeGetAccount mocks base method
func (m *MockInitializer) RegisterBeforeGetAccount(fn func(context.Context, x.Logger, *sql.DB, x.NakamaModule) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterBeforeGetAccount", fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterBeforeGetAccount indicates an expected call of RegisterBeforeGetAccount
func (mr *MockInitializerMockRecorder) RegisterBeforeGetAccount(fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterBeforeGetAccount", reflect.TypeOf((*MockInitializer)(nil).RegisterBeforeGetAccount), fn)
}

// RegisterAfterGetAccount mocks base method
func (m *MockInitializer) RegisterAfterGetAccount(fn func(context.Context, x.Logger, *sql.DB, x.NakamaModule, *api.Account) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterAfterGetAccount", fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterAfterGetAccount indicates an expected call of RegisterAfterGetAccount
func (mr *MockInitializerMockRecorder) RegisterAfterGetAccount(fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterAfterGetAccount", reflect.TypeOf((*MockInitializer)(nil).RegisterAfterGetAccount), fn)
}

// RegisterBeforeUpdateAccount mocks base method
func (m *MockInitializer) RegisterBeforeUpdateAccount(fn func(context.Context, x.Logger, *sql.DB, x.NakamaModule, *api.UpdateAccountRequest) (*api.UpdateAccountRequest, error)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterBeforeUpdateAccount", fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterBeforeUpdateAccount indicates an expected call of RegisterBeforeUpdateAccount
func (mr *MockInitializerMockRecorder) RegisterBeforeUpdateAccount(fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterBeforeUpdateAccount", reflect.TypeOf((*MockInitializer)(nil).RegisterBeforeUpdateAccount), fn)
}

// RegisterAfterUpdateAccount mocks base method
func (m *MockInitializer) RegisterAfterUpdateAccount(fn func(context.Context, x.Logger, *sql.DB, x.NakamaModule, *api.UpdateAccountRequest) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterAfterUpdateAccount", fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterAfterUpdateAccount indicates an expected call of RegisterAfterUpdateAccount
func (mr *MockInitializerMockRecorder) RegisterAfterUpdateAccount(fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterAfterUpdateAccount", reflect.TypeOf((*MockInitializer)(nil).RegisterAfterUpdateAccount), fn)
}

// RegisterBeforeAuthenticateCustom mocks base method
func (m *MockInitializer) RegisterBeforeAuthenticateCustom(fn func(context.Context, x.Logger, *sql.DB, x.NakamaModule, *api.AuthenticateCustomRequest) (*api.AuthenticateCustomRequest, error)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterBeforeAuthenticateCustom", fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterBeforeAuthenticateCustom indicates an expected call of RegisterBeforeAuthenticateCustom
func (mr *MockInitializerMockRecorder) RegisterBeforeAuthenticateCustom(fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterBeforeAuthenticateCustom", reflect.TypeOf((*MockInitializer)(nil).RegisterBeforeAuthenticateCustom), fn)
}

// RegisterAfterAuthenticateCustom mocks base method
func (m *MockInitializer) RegisterAfterAuthenticateCustom(fn func(context.Context, x.Logger, *sql.DB, x.NakamaModule, *api.Session, *api.AuthenticateCustomRequest) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterAfterAuthenticateCustom", fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterAfterAuthenticateCustom indicates an expected call of RegisterAfterAuthenticateCustom
func (mr *MockInitializerMockRecorder) RegisterAfterAuthenticateCustom(fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterAfterAuthenticateCustom", reflect.TypeOf((*MockInitializer)(nil).RegisterAfterAuthenticateCustom), fn)
}

// RegisterBeforeAuthenticateDevice mocks base method
func (m *MockInitializer) RegisterBeforeAuthenticateDevice(fn func(context.Context, x.Logger, *sql.DB, x.NakamaModule, *api.AuthenticateDeviceRequest) (*api.AuthenticateDeviceRequest, error)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterBeforeAuthenticateDevice", fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterBeforeAuthenticateDevice indicates an expected call of RegisterBeforeAuthenticateDevice
func (mr *MockInitializerMockRecorder) RegisterBeforeAuthenticateDevice(fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterBeforeAuthenticateDevice", reflect.TypeOf((*MockInitializer)(nil).RegisterBeforeAuthenticateDevice), fn)
}

// RegisterAfterAuthenticateDevice mocks base method
func (m *MockInitializer) RegisterAfterAuthenticateDevice(fn func(context.Context, x.Logger, *sql.DB, x.NakamaModule, *api.Session, *api.AuthenticateDeviceRequest) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterAfterAuthenticateDevice", fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterAfterAuthenticateDevice indicates an expected call of RegisterAfterAuthenticateDevice
func (mr *MockInitializerMockRecorder) RegisterAfterAuthenticateDevice(fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterAfterAuthenticateDevice", reflect.TypeOf((*MockInitializer)(nil).RegisterAfterAuthenticateDevice), fn)
}

// RegisterBeforeAuthenticateEmail mocks base method
func (m *MockInitializer) RegisterBeforeAuthenticateEmail(fn func(context.Context, x.Logger, *sql.DB, x.NakamaModule, *api.AuthenticateEmailRequest) (*api.AuthenticateEmailRequest, error)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterBeforeAuthenticateEmail", fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterBeforeAuthenticateEmail indicates an expected call of RegisterBeforeAuthenticateEmail
func (mr *MockInitializerMockRecorder) RegisterBeforeAuthenticateEmail(fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterBeforeAuthenticateEmail", reflect.TypeOf((*MockInitializer)(nil).RegisterBeforeAuthenticateEmail), fn)
}

// RegisterAfterAuthenticateEmail mocks base method
func (m *MockInitializer) RegisterAfterAuthenticateEmail(fn func(context.Context, x.Logger, *sql.DB, x.NakamaModule, *api.Session, *api.AuthenticateEmailRequest) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterAfterAuthenticateEmail", fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterAfterAuthenticateEmail indicates an expected call of RegisterAfterAuthenticateEmail
func (mr *MockInitializerMockRecorder) RegisterAfterAuthenticateEmail(fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterAfterAuthenticateEmail", reflect.TypeOf((*MockInitializer)(nil).RegisterAfterAuthenticateEmail), fn)
}

// RegisterBeforeAuthenticateFacebook mocks base method
func (m *MockInitializer) RegisterBeforeAuthenticateFacebook(fn func(context.Context, x.Logger, *sql.DB, x.NakamaModule, *api.AuthenticateFacebookRequest) (*api.AuthenticateFacebookRequest, error)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterBeforeAuthenticateFacebook", fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterBeforeAuthenticateFacebook indicates an expected call of RegisterBeforeAuthenticateFacebook
func (mr *MockInitializerMockRecorder) RegisterBeforeAuthenticateFacebook(fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterBeforeAuthenticateFacebook", reflect.TypeOf((*MockInitializer)(nil).RegisterBeforeAuthenticateFacebook), fn)
}

// RegisterAfterAuthenticateFacebook mocks base method
func (m *MockInitializer) RegisterAfterAuthenticateFacebook(fn func(context.Context, x.Logger, *sql.DB, x.NakamaModule, *api.Session, *api.AuthenticateFacebookRequest) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterAfterAuthenticateFacebook", fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterAfterAuthenticateFacebook indicates an expected call of RegisterAfterAuthenticateFacebook
func (mr *MockInitializerMockRecorder) RegisterAfterAuthenticateFacebook(fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterAfterAuthenticateFacebook", reflect.TypeOf((*MockInitializer)(nil).RegisterAfterAuthenticateFacebook), fn)
}

// RegisterBeforeAuthenticateGameCenter mocks base method
func (m *MockInitializer) RegisterBeforeAuthenticateGameCenter(fn func(context.Context, x.Logger, *sql.DB, x.NakamaModule, *api.AuthenticateGameCenterRequest) (*api.AuthenticateGameCenterRequest, error)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterBeforeAuthenticateGameCenter", fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterBeforeAuthenticateGameCenter indicates an expected call of RegisterBeforeAuthenticateGameCenter
func (mr *MockInitializerMockRecorder) RegisterBeforeAuthenticateGameCenter(fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterBeforeAuthenticateGameCenter", reflect.TypeOf((*MockInitializer)(nil).RegisterBeforeAuthenticateGameCenter), fn)
}

// RegisterAfterAuthenticateGameCenter mocks base method
func (m *MockInitializer) RegisterAfterAuthenticateGameCenter(fn func(context.Context, x.Logger, *sql.DB, x.NakamaModule, *api.Session, *api.AuthenticateGameCenterRequest) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterAfterAuthenticateGameCenter", fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterAfterAuthenticateGameCenter indicates an expected call of RegisterAfterAuthenticateGameCenter
func (mr *MockInitializerMockRecorder) RegisterAfterAuthenticateGameCenter(fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterAfterAuthenticateGameCenter", reflect.TypeOf((*MockInitializer)(nil).RegisterAfterAuthenticateGameCenter), fn)
}

// RegisterBeforeAuthenticateGoogle mocks base method
func (m *MockInitializer) RegisterBeforeAuthenticateGoogle(fn func(context.Context, x.Logger, *sql.DB, x.NakamaModule, *api.AuthenticateGoogleRequest) (*api.AuthenticateGoogleRequest, error)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterBeforeAuthenticateGoogle", fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterBeforeAuthenticateGoogle indicates an expected call of RegisterBeforeAuthenticateGoogle
func (mr *MockInitializerMockRecorder) RegisterBeforeAuthenticateGoogle(fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterBeforeAuthenticateGoogle", reflect.TypeOf((*MockInitializer)(nil).RegisterBeforeAuthenticateGoogle), fn)
}

// RegisterAfterAuthenticateGoogle mocks base method
func (m *MockInitializer) RegisterAfterAuthenticateGoogle(fn func(context.Context, x.Logger, *sql.DB, x.NakamaModule, *api.Session, *api.AuthenticateGoogleRequest) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterAfterAuthenticateGoogle", fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterAfterAuthenticateGoogle indicates an expected call of RegisterAfterAuthenticateGoogle
func (mr *MockInitializerMockRecorder) RegisterAfterAuthenticateGoogle(fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterAfterAuthenticateGoogle", reflect.TypeOf((*MockInitializer)(nil).RegisterAfterAuthenticateGoogle), fn)
}

// RegisterBeforeAuthenticateSteam mocks base method
func (m *MockInitializer) RegisterBeforeAuthenticateSteam(fn func(context.Context, x.Logger, *sql.DB, x.NakamaModule, *api.AuthenticateSteamRequest) (*api.AuthenticateSteamRequest, error)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterBeforeAuthenticateSteam", fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterBeforeAuthenticateSteam indicates an expected call of RegisterBeforeAuthenticateSteam
func (mr *MockInitializerMockRecorder) RegisterBeforeAuthenticateSteam(fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterBeforeAuthenticateSteam", reflect.TypeOf((*MockInitializer)(nil).RegisterBeforeAuthenticateSteam), fn)
}

// RegisterAfterAuthenticateSteam mocks base method
func (m *MockInitializer) RegisterAfterAuthenticateSteam(fn func(context.Context, x.Logger, *sql.DB, x.NakamaModule, *api.Session, *api.AuthenticateSteamRequest) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterAfterAuthenticateSteam", fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterAfterAuthenticateSteam indicates an expected call of RegisterAfterAuthenticateSteam
func (mr *MockInitializerMockRecorder) RegisterAfterAuthenticateSteam(fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterAfterAuthenticateSteam", reflect.TypeOf((*MockInitializer)(nil).RegisterAfterAuthenticateSteam), fn)
}

// RegisterBeforeListChannelMessages mocks base method
func (m *MockInitializer) RegisterBeforeListChannelMessages(fn func(context.Context, x.Logger, *sql.DB, x.NakamaModule, *api.ListChannelMessagesRequest) (*api.ListChannelMessagesRequest, error)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterBeforeListChannelMessages", fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterBeforeListChannelMessages indicates an expected call of RegisterBeforeListChannelMessages
func (mr *MockInitializerMockRecorder) RegisterBeforeListChannelMessages(fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterBeforeListChannelMessages", reflect.TypeOf((*MockInitializer)(nil).RegisterBeforeListChannelMessages), fn)
}

// RegisterAfterListChannelMessages mocks base method
func (m *MockInitializer) RegisterAfterListChannelMessages(fn func(context.Context, x.Logger, *sql.DB, x.NakamaModule, *api.ChannelMessageList, *api.ListChannelMessagesRequest) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterAfterListChannelMessages", fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterAfterListChannelMessages indicates an expected call of RegisterAfterListChannelMessages
func (mr *MockInitializerMockRecorder) RegisterAfterListChannelMessages(fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterAfterListChannelMessages", reflect.TypeOf((*MockInitializer)(nil).RegisterAfterListChannelMessages), fn)
}

// RegisterBeforeListFriends mocks base method
func (m *MockInitializer) RegisterBeforeListFriends(fn func(context.Context, x.Logger, *sql.DB, x.NakamaModule) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterBeforeListFriends", fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterBeforeListFriends indicates an expected call of RegisterBeforeListFriends
func (mr *MockInitializerMockRecorder) RegisterBeforeListFriends(fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterBeforeListFriends", reflect.TypeOf((*MockInitializer)(nil).RegisterBeforeListFriends), fn)
}

// RegisterAfterListFriends mocks base method
func (m *MockInitializer) RegisterAfterListFriends(fn func(context.Context, x.Logger, *sql.DB, x.NakamaModule, *api.Friends) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterAfterListFriends", fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterAfterListFriends indicates an expected call of RegisterAfterListFriends
func (mr *MockInitializerMockRecorder) RegisterAfterListFriends(fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterAfterListFriends", reflect.TypeOf((*MockInitializer)(nil).RegisterAfterListFriends), fn)
}

// RegisterBeforeAddFriends mocks base method
func (m *MockInitializer) RegisterBeforeAddFriends(fn func(context.Context, x.Logger, *sql.DB, x.NakamaModule, *api.AddFriendsRequest) (*api.AddFriendsRequest, error)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterBeforeAddFriends", fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterBeforeAddFriends indicates an expected call of RegisterBeforeAddFriends
func (mr *MockInitializerMockRecorder) RegisterBeforeAddFriends(fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterBeforeAddFriends", reflect.TypeOf((*MockInitializer)(nil).RegisterBeforeAddFriends), fn)
}

// RegisterAfterAddFriends mocks base method
func (m *MockInitializer) RegisterAfterAddFriends(fn func(context.Context, x.Logger, *sql.DB, x.NakamaModule, *api.AddFriendsRequest) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterAfterAddFriends", fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterAfterAddFriends indicates an expected call of RegisterAfterAddFriends
func (mr *MockInitializerMockRecorder) RegisterAfterAddFriends(fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterAfterAddFriends", reflect.TypeOf((*MockInitializer)(nil).RegisterAfterAddFriends), fn)
}

// RegisterBeforeDeleteFriends mocks base method
func (m *MockInitializer) RegisterBeforeDeleteFriends(fn func(context.Context, x.Logger, *sql.DB, x.NakamaModule, *api.DeleteFriendsRequest) (*api.DeleteFriendsRequest, error)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterBeforeDeleteFriends", fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterBeforeDeleteFriends indicates an expected call of RegisterBeforeDeleteFriends
func (mr *MockInitializerMockRecorder) RegisterBeforeDeleteFriends(fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterBeforeDeleteFriends", reflect.TypeOf((*MockInitializer)(nil).RegisterBeforeDeleteFriends), fn)
}

// RegisterAfterDeleteFriends mocks base method
func (m *MockInitializer) RegisterAfterDeleteFriends(fn func(context.Context, x.Logger, *sql.DB, x.NakamaModule, *api.DeleteFriendsRequest) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterAfterDeleteFriends", fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterAfterDeleteFriends indicates an expected call of RegisterAfterDeleteFriends
func (mr *MockInitializerMockRecorder) RegisterAfterDeleteFriends(fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterAfterDeleteFriends", reflect.TypeOf((*MockInitializer)(nil).RegisterAfterDeleteFriends), fn)
}

// RegisterBeforeBlockFriends mocks base method
func (m *MockInitializer) RegisterBeforeBlockFriends(fn func(context.Context, x.Logger, *sql.DB, x.NakamaModule, *api.BlockFriendsRequest) (*api.BlockFriendsRequest, error)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterBeforeBlockFriends", fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterBeforeBlockFriends indicates an expected call of RegisterBeforeBlockFriends
func (mr *MockInitializerMockRecorder) RegisterBeforeBlockFriends(fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterBeforeBlockFriends", reflect.TypeOf((*MockInitializer)(nil).RegisterBeforeBlockFriends), fn)
}

// RegisterAfterBlockFriends mocks base method
func (m *MockInitializer) RegisterAfterBlockFriends(fn func(context.Context, x.Logger, *sql.DB, x.NakamaModule, *api.BlockFriendsRequest) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterAfterBlockFriends", fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterAfterBlockFriends indicates an expected call of RegisterAfterBlockFriends
func (mr *MockInitializerMockRecorder) RegisterAfterBlockFriends(fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterAfterBlockFriends", reflect.TypeOf((*MockInitializer)(nil).RegisterAfterBlockFriends), fn)
}

// RegisterBeforeImportFacebookFriends mocks base method
func (m *MockInitializer) RegisterBeforeImportFacebookFriends(fn func(context.Context, x.Logger, *sql.DB, x.NakamaModule, *api.ImportFacebookFriendsRequest) (*api.ImportFacebookFriendsRequest, error)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterBeforeImportFacebookFriends", fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterBeforeImportFacebookFriends indicates an expected call of RegisterBeforeImportFacebookFriends
func (mr *MockInitializerMockRecorder) RegisterBeforeImportFacebookFriends(fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterBeforeImportFacebookFriends", reflect.TypeOf((*MockInitializer)(nil).RegisterBeforeImportFacebookFriends), fn)
}

// RegisterAfterImportFacebookFriends mocks base method
func (m *MockInitializer) RegisterAfterImportFacebookFriends(fn func(context.Context, x.Logger, *sql.DB, x.NakamaModule, *api.ImportFacebookFriendsRequest) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterAfterImportFacebookFriends", fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterAfterImportFacebookFriends indicates an expected call of RegisterAfterImportFacebookFriends
func (mr *MockInitializerMockRecorder) RegisterAfterImportFacebookFriends(fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterAfterImportFacebookFriends", reflect.TypeOf((*MockInitializer)(nil).RegisterAfterImportFacebookFriends), fn)
}

// RegisterBeforeCreateGroup mocks base method
func (m *MockInitializer) RegisterBeforeCreateGroup(fn func(context.Context, x.Logger, *sql.DB, x.NakamaModule, *api.CreateGroupRequest) (*api.CreateGroupRequest, error)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterBeforeCreateGroup", fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterBeforeCreateGroup indicates an expected call of RegisterBeforeCreateGroup
func (mr *MockInitializerMockRecorder) RegisterBeforeCreateGroup(fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterBeforeCreateGroup", reflect.TypeOf((*MockInitializer)(nil).RegisterBeforeCreateGroup), fn)
}

// RegisterAfterCreateGroup mocks base method
func (m *MockInitializer) RegisterAfterCreateGroup(fn func(context.Context, x.Logger, *sql.DB, x.NakamaModule, *api.Group, *api.CreateGroupRequest) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterAfterCreateGroup", fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterAfterCreateGroup indicates an expected call of RegisterAfterCreateGroup
func (mr *MockInitializerMockRecorder) RegisterAfterCreateGroup(fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterAfterCreateGroup", reflect.TypeOf((*MockInitializer)(nil).RegisterAfterCreateGroup), fn)
}

// RegisterBeforeUpdateGroup mocks base method
func (m *MockInitializer) RegisterBeforeUpdateGroup(fn func(context.Context, x.Logger, *sql.DB, x.NakamaModule, *api.UpdateGroupRequest) (*api.UpdateGroupRequest, error)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterBeforeUpdateGroup", fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterBeforeUpdateGroup indicates an expected call of RegisterBeforeUpdateGroup
func (mr *MockInitializerMockRecorder) RegisterBeforeUpdateGroup(fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterBeforeUpdateGroup", reflect.TypeOf((*MockInitializer)(nil).RegisterBeforeUpdateGroup), fn)
}

// RegisterAfterUpdateGroup mocks base method
func (m *MockInitializer) RegisterAfterUpdateGroup(fn func(context.Context, x.Logger, *sql.DB, x.NakamaModule, *api.UpdateGroupRequest) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterAfterUpdateGroup", fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterAfterUpdateGroup indicates an expected call of RegisterAfterUpdateGroup
func (mr *MockInitializerMockRecorder) RegisterAfterUpdateGroup(fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterAfterUpdateGroup", reflect.TypeOf((*MockInitializer)(nil).RegisterAfterUpdateGroup), fn)
}

// RegisterBeforeDeleteGroup mocks base method
func (m *MockInitializer) RegisterBeforeDeleteGroup(fn func(context.Context, x.Logger, *sql.DB, x.NakamaModule, *api.DeleteGroupRequest) (*api.DeleteGroupRequest, error)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterBeforeDeleteGroup", fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterBeforeDeleteGroup indicates an expected call of RegisterBeforeDeleteGroup
func (mr *MockInitializerMockRecorder) RegisterBeforeDeleteGroup(fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterBeforeDeleteGroup", reflect.TypeOf((*MockInitializer)(nil).RegisterBeforeDeleteGroup), fn)
}

// RegisterAfterDeleteGroup mocks base method
func (m *MockInitializer) RegisterAfterDeleteGroup(fn func(context.Context, x.Logger, *sql.DB, x.NakamaModule, *api.DeleteGroupRequest) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterAfterDeleteGroup", fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterAfterDeleteGroup indicates an expected call of RegisterAfterDeleteGroup
func (mr *MockInitializerMockRecorder) RegisterAfterDeleteGroup(fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterAfterDeleteGroup", reflect.TypeOf((*MockInitializer)(nil).RegisterAfterDeleteGroup), fn)
}

// RegisterBeforeJoinGroup mocks base method
func (m *MockInitializer) RegisterBeforeJoinGroup(fn func(context.Context, x.Logger, *sql.DB, x.NakamaModule, *api.JoinGroupRequest) (*api.JoinGroupRequest, error)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterBeforeJoinGroup", fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterBeforeJoinGroup indicates an expected call of RegisterBeforeJoinGroup
func (mr *MockInitializerMockRecorder) RegisterBeforeJoinGroup(fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterBeforeJoinGroup", reflect.TypeOf((*MockInitializer)(nil).RegisterBeforeJoinGroup), fn)
}

// RegisterAfterJoinGroup mocks base method
func (m *MockInitializer) RegisterAfterJoinGroup(fn func(context.Context, x.Logger, *sql.DB, x.NakamaModule, *api.JoinGroupRequest) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterAfterJoinGroup", fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterAfterJoinGroup indicates an expected call of RegisterAfterJoinGroup
func (mr *MockInitializerMockRecorder) RegisterAfterJoinGroup(fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterAfterJoinGroup", reflect.TypeOf((*MockInitializer)(nil).RegisterAfterJoinGroup), fn)
}

// RegisterBeforeLeaveGroup mocks base method
func (m *MockInitializer) RegisterBeforeLeaveGroup(fn func(context.Context, x.Logger, *sql.DB, x.NakamaModule, *api.LeaveGroupRequest) (*api.LeaveGroupRequest, error)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterBeforeLeaveGroup", fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterBeforeLeaveGroup indicates an expected call of RegisterBeforeLeaveGroup
func (mr *MockInitializerMockRecorder) RegisterBeforeLeaveGroup(fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterBeforeLeaveGroup", reflect.TypeOf((*MockInitializer)(nil).RegisterBeforeLeaveGroup), fn)
}

// RegisterAfterLeaveGroup mocks base method
func (m *MockInitializer) RegisterAfterLeaveGroup(fn func(context.Context, x.Logger, *sql.DB, x.NakamaModule, *api.LeaveGroupRequest) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterAfterLeaveGroup", fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterAfterLeaveGroup indicates an expected call of RegisterAfterLeaveGroup
func (mr *MockInitializerMockRecorder) RegisterAfterLeaveGroup(fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterAfterLeaveGroup", reflect.TypeOf((*MockInitializer)(nil).RegisterAfterLeaveGroup), fn)
}

// RegisterBeforeAddGroupUsers mocks base method
func (m *MockInitializer) RegisterBeforeAddGroupUsers(fn func(context.Context, x.Logger, *sql.DB, x.NakamaModule, *api.AddGroupUsersRequest) (*api.AddGroupUsersRequest, error)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterBeforeAddGroupUsers", fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterBeforeAddGroupUsers indicates an expected call of RegisterBeforeAddGroupUsers
func (mr *MockInitializerMockRecorder) RegisterBeforeAddGroupUsers(fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterBeforeAddGroupUsers", reflect.TypeOf((*MockInitializer)(nil).RegisterBeforeAddGroupUsers), fn)
}

// RegisterAfterAddGroupUsers mocks base method
func (m *MockInitializer) RegisterAfterAddGroupUsers(fn func(context.Context, x.Logger, *sql.DB, x.NakamaModule, *api.AddGroupUsersRequest) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterAfterAddGroupUsers", fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterAfterAddGroupUsers indicates an expected call of RegisterAfterAddGroupUsers
func (mr *MockInitializerMockRecorder) RegisterAfterAddGroupUsers(fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterAfterAddGroupUsers", reflect.TypeOf((*MockInitializer)(nil).RegisterAfterAddGroupUsers), fn)
}

// RegisterBeforeKickGroupUsers mocks base method
func (m *MockInitializer) RegisterBeforeKickGroupUsers(fn func(context.Context, x.Logger, *sql.DB, x.NakamaModule, *api.KickGroupUsersRequest) (*api.KickGroupUsersRequest, error)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterBeforeKickGroupUsers", fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterBeforeKickGroupUsers indicates an expected call of RegisterBeforeKickGroupUsers
func (mr *MockInitializerMockRecorder) RegisterBeforeKickGroupUsers(fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterBeforeKickGroupUsers", reflect.TypeOf((*MockInitializer)(nil).RegisterBeforeKickGroupUsers), fn)
}

// RegisterAfterKickGroupUsers mocks base method
func (m *MockInitializer) RegisterAfterKickGroupUsers(fn func(context.Context, x.Logger, *sql.DB, x.NakamaModule, *api.KickGroupUsersRequest) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterAfterKickGroupUsers", fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterAfterKickGroupUsers indicates an expected call of RegisterAfterKickGroupUsers
func (mr *MockInitializerMockRecorder) RegisterAfterKickGroupUsers(fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterAfterKickGroupUsers", reflect.TypeOf((*MockInitializer)(nil).RegisterAfterKickGroupUsers), fn)
}

// RegisterBeforePromoteGroupUsers mocks base method
func (m *MockInitializer) RegisterBeforePromoteGroupUsers(fn func(context.Context, x.Logger, *sql.DB, x.NakamaModule, *api.PromoteGroupUsersRequest) (*api.PromoteGroupUsersRequest, error)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterBeforePromoteGroupUsers", fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterBeforePromoteGroupUsers indicates an expected call of RegisterBeforePromoteGroupUsers
func (mr *MockInitializerMockRecorder) RegisterBeforePromoteGroupUsers(fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterBeforePromoteGroupUsers", reflect.TypeOf((*MockInitializer)(nil).RegisterBeforePromoteGroupUsers), fn)
}

// RegisterAfterPromoteGroupUsers mocks base method
func (m *MockInitializer) RegisterAfterPromoteGroupUsers(fn func(context.Context, x.Logger, *sql.DB, x.NakamaModule, *api.PromoteGroupUsersRequest) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterAfterPromoteGroupUsers", fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterAfterPromoteGroupUsers indicates an expected call of RegisterAfterPromoteGroupUsers
func (mr *MockInitializerMockRecorder) RegisterAfterPromoteGroupUsers(fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterAfterPromoteGroupUsers", reflect.TypeOf((*MockInitializer)(nil).RegisterAfterPromoteGroupUsers), fn)
}

// RegisterBeforeListGroupUsers mocks base method
func (m *MockInitializer) RegisterBeforeListGroupUsers(fn func(context.Context, x.Logger, *sql.DB, x.NakamaModule, *api.ListGroupUsersRequest) (*api.ListGroupUsersRequest, error)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterBeforeListGroupUsers", fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterBeforeListGroupUsers indicates an expected call of RegisterBeforeListGroupUsers
func (mr *MockInitializerMockRecorder) RegisterBeforeListGroupUsers(fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterBeforeListGroupUsers", reflect.TypeOf((*MockInitializer)(nil).RegisterBeforeListGroupUsers), fn)
}

// RegisterAfterListGroupUsers mocks base method
func (m *MockInitializer) RegisterAfterListGroupUsers(fn func(context.Context, x.Logger, *sql.DB, x.NakamaModule, *api.GroupUserList, *api.ListGroupUsersRequest) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterAfterListGroupUsers", fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterAfterListGroupUsers indicates an expected call of RegisterAfterListGroupUsers
func (mr *MockInitializerMockRecorder) RegisterAfterListGroupUsers(fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterAfterListGroupUsers", reflect.TypeOf((*MockInitializer)(nil).RegisterAfterListGroupUsers), fn)
}

// RegisterBeforeListUserGroups mocks base method
func (m *MockInitializer) RegisterBeforeListUserGroups(fn func(context.Context, x.Logger, *sql.DB, x.NakamaModule, *api.ListUserGroupsRequest) (*api.ListUserGroupsRequest, error)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterBeforeListUserGroups", fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterBeforeListUserGroups indicates an expected call of RegisterBeforeListUserGroups
func (mr *MockInitializerMockRecorder) RegisterBeforeListUserGroups(fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterBeforeListUserGroups", reflect.TypeOf((*MockInitializer)(nil).RegisterBeforeListUserGroups), fn)
}

// RegisterAfterListUserGroups mocks base method
func (m *MockInitializer) RegisterAfterListUserGroups(fn func(context.Context, x.Logger, *sql.DB, x.NakamaModule, *api.UserGroupList, *api.ListUserGroupsRequest) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterAfterListUserGroups", fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterAfterListUserGroups indicates an expected call of RegisterAfterListUserGroups
func (mr *MockInitializerMockRecorder) RegisterAfterListUserGroups(fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterAfterListUserGroups", reflect.TypeOf((*MockInitializer)(nil).RegisterAfterListUserGroups), fn)
}

// RegisterBeforeListGroups mocks base method
func (m *MockInitializer) RegisterBeforeListGroups(fn func(context.Context, x.Logger, *sql.DB, x.NakamaModule, *api.ListGroupsRequest) (*api.ListGroupsRequest, error)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterBeforeListGroups", fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterBeforeListGroups indicates an expected call of RegisterBeforeListGroups
func (mr *MockInitializerMockRecorder) RegisterBeforeListGroups(fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterBeforeListGroups", reflect.TypeOf((*MockInitializer)(nil).RegisterBeforeListGroups), fn)
}

// RegisterAfterListGroups mocks base method
func (m *MockInitializer) RegisterAfterListGroups(fn func(context.Context, x.Logger, *sql.DB, x.NakamaModule, *api.GroupList, *api.ListGroupsRequest) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterAfterListGroups", fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterAfterListGroups indicates an expected call of RegisterAfterListGroups
func (mr *MockInitializerMockRecorder) RegisterAfterListGroups(fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterAfterListGroups", reflect.TypeOf((*MockInitializer)(nil).RegisterAfterListGroups), fn)
}

// RegisterBeforeDeleteLeaderboardRecord mocks base method
func (m *MockInitializer) RegisterBeforeDeleteLeaderboardRecord(fn func(context.Context, x.Logger, *sql.DB, x.NakamaModule, *api.DeleteLeaderboardRecordRequest) (*api.DeleteLeaderboardRecordRequest, error)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterBeforeDeleteLeaderboardRecord", fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterBeforeDeleteLeaderboardRecord indicates an expected call of RegisterBeforeDeleteLeaderboardRecord
func (mr *MockInitializerMockRecorder) RegisterBeforeDeleteLeaderboardRecord(fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterBeforeDeleteLeaderboardRecord", reflect.TypeOf((*MockInitializer)(nil).RegisterBeforeDeleteLeaderboardRecord), fn)
}

// RegisterAfterDeleteLeaderboardRecord mocks base method
func (m *MockInitializer) RegisterAfterDeleteLeaderboardRecord(fn func(context.Context, x.Logger, *sql.DB, x.NakamaModule, *api.DeleteLeaderboardRecordRequest) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterAfterDeleteLeaderboardRecord", fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterAfterDeleteLeaderboardRecord indicates an expected call of RegisterAfterDeleteLeaderboardRecord
func (mr *MockInitializerMockRecorder) RegisterAfterDeleteLeaderboardRecord(fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterAfterDeleteLeaderboardRecord", reflect.TypeOf((*MockInitializer)(nil).RegisterAfterDeleteLeaderboardRecord), fn)
}

// RegisterBeforeListLeaderboardRecords mocks base method
func (m *MockInitializer) RegisterBeforeListLeaderboardRecords(fn func(context.Context, x.Logger, *sql.DB, x.NakamaModule, *api.ListLeaderboardRecordsRequest) (*api.ListLeaderboardRecordsRequest, error)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterBeforeListLeaderboardRecords", fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterBeforeListLeaderboardRecords indicates an expected call of RegisterBeforeListLeaderboardRecords
func (mr *MockInitializerMockRecorder) RegisterBeforeListLeaderboardRecords(fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterBeforeListLeaderboardRecords", reflect.TypeOf((*MockInitializer)(nil).RegisterBeforeListLeaderboardRecords), fn)
}

// RegisterAfterListLeaderboardRecords mocks base method
func (m *MockInitializer) RegisterAfterListLeaderboardRecords(fn func(context.Context, x.Logger, *sql.DB, x.NakamaModule, *api.LeaderboardRecordList, *api.ListLeaderboardRecordsRequest) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterAfterListLeaderboardRecords", fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterAfterListLeaderboardRecords indicates an expected call of RegisterAfterListLeaderboardRecords
func (mr *MockInitializerMockRecorder) RegisterAfterListLeaderboardRecords(fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterAfterListLeaderboardRecords", reflect.TypeOf((*MockInitializer)(nil).RegisterAfterListLeaderboardRecords), fn)
}

// RegisterBeforeWriteLeaderboardRecord mocks base method
func (m *MockInitializer) RegisterBeforeWriteLeaderboardRecord(fn func(context.Context, x.Logger, *sql.DB, x.NakamaModule, *api.WriteLeaderboardRecordRequest) (*api.WriteLeaderboardRecordRequest, error)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterBeforeWriteLeaderboardRecord", fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterBeforeWriteLeaderboardRecord indicates an expected call of RegisterBeforeWriteLeaderboardRecord
func (mr *MockInitializerMockRecorder) RegisterBeforeWriteLeaderboardRecord(fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterBeforeWriteLeaderboardRecord", reflect.TypeOf((*MockInitializer)(nil).RegisterBeforeWriteLeaderboardRecord), fn)
}

// RegisterAfterWriteLeaderboardRecord mocks base method
func (m *MockInitializer) RegisterAfterWriteLeaderboardRecord(fn func(context.Context, x.Logger, *sql.DB, x.NakamaModule, *api.LeaderboardRecord, *api.WriteLeaderboardRecordRequest) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterAfterWriteLeaderboardRecord", fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterAfterWriteLeaderboardRecord indicates an expected call of RegisterAfterWriteLeaderboardRecord
func (mr *MockInitializerMockRecorder) RegisterAfterWriteLeaderboardRecord(fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterAfterWriteLeaderboardRecord", reflect.TypeOf((*MockInitializer)(nil).RegisterAfterWriteLeaderboardRecord), fn)
}

// RegisterBeforeListLeaderboardRecordsAroundOwner mocks base method
func (m *MockInitializer) RegisterBeforeListLeaderboardRecordsAroundOwner(fn func(context.Context, x.Logger, *sql.DB, x.NakamaModule, *api.ListLeaderboardRecordsAroundOwnerRequest) (*api.ListLeaderboardRecordsAroundOwnerRequest, error)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterBeforeListLeaderboardRecordsAroundOwner", fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterBeforeListLeaderboardRecordsAroundOwner indicates an expected call of RegisterBeforeListLeaderboardRecordsAroundOwner
func (mr *MockInitializerMockRecorder) RegisterBeforeListLeaderboardRecordsAroundOwner(fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterBeforeListLeaderboardRecordsAroundOwner", reflect.TypeOf((*MockInitializer)(nil).RegisterBeforeListLeaderboardRecordsAroundOwner), fn)
}

// RegisterAfterListLeaderboardRecordsAroundOwner mocks base method
func (m *MockInitializer) RegisterAfterListLeaderboardRecordsAroundOwner(fn func(context.Context, x.Logger, *sql.DB, x.NakamaModule, *api.LeaderboardRecordList, *api.ListLeaderboardRecordsAroundOwnerRequest) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterAfterListLeaderboardRecordsAroundOwner", fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterAfterListLeaderboardRecordsAroundOwner indicates an expected call of RegisterAfterListLeaderboardRecordsAroundOwner
func (mr *MockInitializerMockRecorder) RegisterAfterListLeaderboardRecordsAroundOwner(fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterAfterListLeaderboardRecordsAroundOwner", reflect.TypeOf((*MockInitializer)(nil).RegisterAfterListLeaderboardRecordsAroundOwner), fn)
}

// RegisterBeforeLinkCustom mocks base method
func (m *MockInitializer) RegisterBeforeLinkCustom(fn func(context.Context, x.Logger, *sql.DB, x.NakamaModule, *api.AccountCustom) (*api.AccountCustom, error)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterBeforeLinkCustom", fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterBeforeLinkCustom indicates an expected call of RegisterBeforeLinkCustom
func (mr *MockInitializerMockRecorder) RegisterBeforeLinkCustom(fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterBeforeLinkCustom", reflect.TypeOf((*MockInitializer)(nil).RegisterBeforeLinkCustom), fn)
}

// RegisterAfterLinkCustom mocks base method
func (m *MockInitializer) RegisterAfterLinkCustom(fn func(context.Context, x.Logger, *sql.DB, x.NakamaModule, *api.AccountCustom) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterAfterLinkCustom", fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterAfterLinkCustom indicates an expected call of RegisterAfterLinkCustom
func (mr *MockInitializerMockRecorder) RegisterAfterLinkCustom(fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterAfterLinkCustom", reflect.TypeOf((*MockInitializer)(nil).RegisterAfterLinkCustom), fn)
}

// RegisterBeforeLinkDevice mocks base method
func (m *MockInitializer) RegisterBeforeLinkDevice(fn func(context.Context, x.Logger, *sql.DB, x.NakamaModule, *api.AccountDevice) (*api.AccountDevice, error)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterBeforeLinkDevice", fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterBeforeLinkDevice indicates an expected call of RegisterBeforeLinkDevice
func (mr *MockInitializerMockRecorder) RegisterBeforeLinkDevice(fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterBeforeLinkDevice", reflect.TypeOf((*MockInitializer)(nil).RegisterBeforeLinkDevice), fn)
}

// RegisterAfterLinkDevice mocks base method
func (m *MockInitializer) RegisterAfterLinkDevice(fn func(context.Context, x.Logger, *sql.DB, x.NakamaModule, *api.AccountDevice) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterAfterLinkDevice", fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterAfterLinkDevice indicates an expected call of RegisterAfterLinkDevice
func (mr *MockInitializerMockRecorder) RegisterAfterLinkDevice(fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterAfterLinkDevice", reflect.TypeOf((*MockInitializer)(nil).RegisterAfterLinkDevice), fn)
}

// RegisterBeforeLinkEmail mocks base method
func (m *MockInitializer) RegisterBeforeLinkEmail(fn func(context.Context, x.Logger, *sql.DB, x.NakamaModule, *api.AccountEmail) (*api.AccountEmail, error)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterBeforeLinkEmail", fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterBeforeLinkEmail indicates an expected call of RegisterBeforeLinkEmail
func (mr *MockInitializerMockRecorder) RegisterBeforeLinkEmail(fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterBeforeLinkEmail", reflect.TypeOf((*MockInitializer)(nil).RegisterBeforeLinkEmail), fn)
}

// RegisterAfterLinkEmail mocks base method
func (m *MockInitializer) RegisterAfterLinkEmail(fn func(context.Context, x.Logger, *sql.DB, x.NakamaModule, *api.AccountEmail) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterAfterLinkEmail", fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterAfterLinkEmail indicates an expected call of RegisterAfterLinkEmail
func (mr *MockInitializerMockRecorder) RegisterAfterLinkEmail(fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterAfterLinkEmail", reflect.TypeOf((*MockInitializer)(nil).RegisterAfterLinkEmail), fn)
}

// RegisterBeforeLinkFacebook mocks base method
func (m *MockInitializer) RegisterBeforeLinkFacebook(fn func(context.Context, x.Logger, *sql.DB, x.NakamaModule, *api.LinkFacebookRequest) (*api.LinkFacebookRequest, error)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterBeforeLinkFacebook", fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterBeforeLinkFacebook indicates an expected call of RegisterBeforeLinkFacebook
func (mr *MockInitializerMockRecorder) RegisterBeforeLinkFacebook(fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterBeforeLinkFacebook", reflect.TypeOf((*MockInitializer)(nil).RegisterBeforeLinkFacebook), fn)
}

// RegisterAfterLinkFacebook mocks base method
func (m *MockInitializer) RegisterAfterLinkFacebook(fn func(context.Context, x.Logger, *sql.DB, x.NakamaModule, *api.LinkFacebookRequest) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterAfterLinkFacebook", fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterAfterLinkFacebook indicates an expected call of RegisterAfterLinkFacebook
func (mr *MockInitializerMockRecorder) RegisterAfterLinkFacebook(fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterAfterLinkFacebook", reflect.TypeOf((*MockInitializer)(nil).RegisterAfterLinkFacebook), fn)
}

// RegisterBeforeLinkGameCenter mocks base method
func (m *MockInitializer) RegisterBeforeLinkGameCenter(fn func(context.Context, x.Logger, *sql.DB, x.NakamaModule, *api.AccountGameCenter) (*api.AccountGameCenter, error)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterBeforeLinkGameCenter", fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterBeforeLinkGameCenter indicates an expected call of RegisterBeforeLinkGameCenter
func (mr *MockInitializerMockRecorder) RegisterBeforeLinkGameCenter(fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterBeforeLinkGameCenter", reflect.TypeOf((*MockInitializer)(nil).RegisterBeforeLinkGameCenter), fn)
}

// RegisterAfterLinkGameCenter mocks base method
func (m *MockInitializer) RegisterAfterLinkGameCenter(fn func(context.Context, x.Logger, *sql.DB, x.NakamaModule, *api.AccountGameCenter) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterAfterLinkGameCenter", fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterAfterLinkGameCenter indicates an expected call of RegisterAfterLinkGameCenter
func (mr *MockInitializerMockRecorder) RegisterAfterLinkGameCenter(fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterAfterLinkGameCenter", reflect.TypeOf((*MockInitializer)(nil).RegisterAfterLinkGameCenter), fn)
}

// RegisterBeforeLinkGoogle mocks base method
func (m *MockInitializer) RegisterBeforeLinkGoogle(fn func(context.Context, x.Logger, *sql.DB, x.NakamaModule, *api.AccountGoogle) (*api.AccountGoogle, error)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterBeforeLinkGoogle", fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterBeforeLinkGoogle indicates an expected call of RegisterBeforeLinkGoogle
func (mr *MockInitializerMockRecorder) RegisterBeforeLinkGoogle(fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterBeforeLinkGoogle", reflect.TypeOf((*MockInitializer)(nil).RegisterBeforeLinkGoogle), fn)
}

// RegisterAfterLinkGoogle mocks base method
func (m *MockInitializer) RegisterAfterLinkGoogle(fn func(context.Context, x.Logger, *sql.DB, x.NakamaModule, *api.AccountGoogle) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterAfterLinkGoogle", fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterAfterLinkGoogle indicates an expected call of RegisterAfterLinkGoogle
func (mr *MockInitializerMockRecorder) RegisterAfterLinkGoogle(fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterAfterLinkGoogle", reflect.TypeOf((*MockInitializer)(nil).RegisterAfterLinkGoogle), fn)
}

// RegisterBeforeLinkSteam mocks base method
func (m *MockInitializer) RegisterBeforeLinkSteam(fn func(context.Context, x.Logger, *sql.DB, x.NakamaModule, *api.AccountSteam) (*api.AccountSteam, error)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterBeforeLinkSteam", fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterBeforeLinkSteam indicates an expected call of RegisterBeforeLinkSteam
func (mr *MockInitializerMockRecorder) RegisterBeforeLinkSteam(fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterBeforeLinkSteam", reflect.TypeOf((*MockInitializer)(nil).RegisterBeforeLinkSteam), fn)
}

// RegisterAfterLinkSteam mocks base method
func (m *MockInitializer) RegisterAfterLinkSteam(fn func(context.Context, x.Logger, *sql.DB, x.NakamaModule, *api.AccountSteam) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterAfterLinkSteam", fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterAfterLinkSteam indicates an expected call of RegisterAfterLinkSteam
func (mr *MockInitializerMockRecorder) RegisterAfterLinkSteam(fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterAfterLinkSteam", reflect.TypeOf((*MockInitializer)(nil).RegisterAfterLinkSteam), fn)
}

// RegisterBeforeListMatches mocks base method
func (m *MockInitializer) RegisterBeforeListMatches(fn func(context.Context, x.Logger, *sql.DB, x.NakamaModule, *api.ListMatchesRequest) (*api.ListMatchesRequest, error)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterBeforeListMatches", fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterBeforeListMatches indicates an expected call of RegisterBeforeListMatches
func (mr *MockInitializerMockRecorder) RegisterBeforeListMatches(fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterBeforeListMatches", reflect.TypeOf((*MockInitializer)(nil).RegisterBeforeListMatches), fn)
}

// RegisterAfterListMatches mocks base method
func (m *MockInitializer) RegisterAfterListMatches(fn func(context.Context, x.Logger, *sql.DB, x.NakamaModule, *api.MatchList, *api.ListMatchesRequest) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterAfterListMatches", fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterAfterListMatches indicates an expected call of RegisterAfterListMatches
func (mr *MockInitializerMockRecorder) RegisterAfterListMatches(fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterAfterListMatches", reflect.TypeOf((*MockInitializer)(nil).RegisterAfterListMatches), fn)
}

// RegisterBeforeListNotifications mocks base method
func (m *MockInitializer) RegisterBeforeListNotifications(fn func(context.Context, x.Logger, *sql.DB, x.NakamaModule, *api.ListNotificationsRequest) (*api.ListNotificationsRequest, error)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterBeforeListNotifications", fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterBeforeListNotifications indicates an expected call of RegisterBeforeListNotifications
func (mr *MockInitializerMockRecorder) RegisterBeforeListNotifications(fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterBeforeListNotifications", reflect.TypeOf((*MockInitializer)(nil).RegisterBeforeListNotifications), fn)
}

// RegisterAfterListNotifications mocks base method
func (m *MockInitializer) RegisterAfterListNotifications(fn func(context.Context, x.Logger, *sql.DB, x.NakamaModule, *api.NotificationList, *api.ListNotificationsRequest) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterAfterListNotifications", fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterAfterListNotifications indicates an expected call of RegisterAfterListNotifications
func (mr *MockInitializerMockRecorder) RegisterAfterListNotifications(fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterAfterListNotifications", reflect.TypeOf((*MockInitializer)(nil).RegisterAfterListNotifications), fn)
}

// RegisterBeforeDeleteNotification mocks base method
func (m *MockInitializer) RegisterBeforeDeleteNotification(fn func(context.Context, x.Logger, *sql.DB, x.NakamaModule, *api.DeleteNotificationsRequest) (*api.DeleteNotificationsRequest, error)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterBeforeDeleteNotification", fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterBeforeDeleteNotification indicates an expected call of RegisterBeforeDeleteNotification
func (mr *MockInitializerMockRecorder) RegisterBeforeDeleteNotification(fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterBeforeDeleteNotification", reflect.TypeOf((*MockInitializer)(nil).RegisterBeforeDeleteNotification), fn)
}

// RegisterAfterDeleteNotification mocks base method
func (m *MockInitializer) RegisterAfterDeleteNotification(fn func(context.Context, x.Logger, *sql.DB, x.NakamaModule, *api.DeleteNotificationsRequest) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterAfterDeleteNotification", fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterAfterDeleteNotification indicates an expected call of RegisterAfterDeleteNotification
func (mr *MockInitializerMockRecorder) RegisterAfterDeleteNotification(fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterAfterDeleteNotification", reflect.TypeOf((*MockInitializer)(nil).RegisterAfterDeleteNotification), fn)
}

// RegisterBeforeListStorageObjects mocks base method
func (m *MockInitializer) RegisterBeforeListStorageObjects(fn func(context.Context, x.Logger, *sql.DB, x.NakamaModule, *api.ListStorageObjectsRequest) (*api.ListStorageObjectsRequest, error)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterBeforeListStorageObjects", fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterBeforeListStorageObjects indicates an expected call of RegisterBeforeListStorageObjects
func (mr *MockInitializerMockRecorder) RegisterBeforeListStorageObjects(fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterBeforeListStorageObjects", reflect.TypeOf((*MockInitializer)(nil).RegisterBeforeListStorageObjects), fn)
}

// RegisterAfterListStorageObjects mocks base method
func (m *MockInitializer) RegisterAfterListStorageObjects(fn func(context.Context, x.Logger, *sql.DB, x.NakamaModule, *api.StorageObjectList, *api.ListStorageObjectsRequest) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterAfterListStorageObjects", fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterAfterListStorageObjects indicates an expected call of RegisterAfterListStorageObjects
func (mr *MockInitializerMockRecorder) RegisterAfterListStorageObjects(fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterAfterListStorageObjects", reflect.TypeOf((*MockInitializer)(nil).RegisterAfterListStorageObjects), fn)
}

// RegisterBeforeReadStorageObjects mocks base method
func (m *MockInitializer) RegisterBeforeReadStorageObjects(fn func(context.Context, x.Logger, *sql.DB, x.NakamaModule, *api.ReadStorageObjectsRequest) (*api.ReadStorageObjectsRequest, error)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterBeforeReadStorageObjects", fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterBeforeReadStorageObjects indicates an expected call of RegisterBeforeReadStorageObjects
func (mr *MockInitializerMockRecorder) RegisterBeforeReadStorageObjects(fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterBeforeReadStorageObjects", reflect.TypeOf((*MockInitializer)(nil).RegisterBeforeReadStorageObjects), fn)
}

// RegisterAfterReadStorageObjects mocks base method
func (m *MockInitializer) RegisterAfterReadStorageObjects(fn func(context.Context, x.Logger, *sql.DB, x.NakamaModule, *api.StorageObjects, *api.ReadStorageObjectsRequest) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterAfterReadStorageObjects", fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterAfterReadStorageObjects indicates an expected call of RegisterAfterReadStorageObjects
func (mr *MockInitializerMockRecorder) RegisterAfterReadStorageObjects(fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterAfterReadStorageObjects", reflect.TypeOf((*MockInitializer)(nil).RegisterAfterReadStorageObjects), fn)
}

// RegisterBeforeWriteStorageObjects mocks base method
func (m *MockInitializer) RegisterBeforeWriteStorageObjects(fn func(context.Context, x.Logger, *sql.DB, x.NakamaModule, *api.WriteStorageObjectsRequest) (*api.WriteStorageObjectsRequest, error)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterBeforeWriteStorageObjects", fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterBeforeWriteStorageObjects indicates an expected call of RegisterBeforeWriteStorageObjects
func (mr *MockInitializerMockRecorder) RegisterBeforeWriteStorageObjects(fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterBeforeWriteStorageObjects", reflect.TypeOf((*MockInitializer)(nil).RegisterBeforeWriteStorageObjects), fn)
}

// RegisterAfterWriteStorageObjects mocks base method
func (m *MockInitializer) RegisterAfterWriteStorageObjects(fn func(context.Context, x.Logger, *sql.DB, x.NakamaModule, *api.StorageObjectAcks, *api.WriteStorageObjectsRequest) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterAfterWriteStorageObjects", fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterAfterWriteStorageObjects indicates an expected call of RegisterAfterWriteStorageObjects
func (mr *MockInitializerMockRecorder) RegisterAfterWriteStorageObjects(fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterAfterWriteStorageObjects", reflect.TypeOf((*MockInitializer)(nil).RegisterAfterWriteStorageObjects), fn)
}

// RegisterBeforeDeleteStorageObjects mocks base method
func (m *MockInitializer) RegisterBeforeDeleteStorageObjects(fn func(context.Context, x.Logger, *sql.DB, x.NakamaModule, *api.DeleteStorageObjectsRequest) (*api.DeleteStorageObjectsRequest, error)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterBeforeDeleteStorageObjects", fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterBeforeDeleteStorageObjects indicates an expected call of RegisterBeforeDeleteStorageObjects
func (mr *MockInitializerMockRecorder) RegisterBeforeDeleteStorageObjects(fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterBeforeDeleteStorageObjects", reflect.TypeOf((*MockInitializer)(nil).RegisterBeforeDeleteStorageObjects), fn)
}

// RegisterAfterDeleteStorageObjects mocks base method
func (m *MockInitializer) RegisterAfterDeleteStorageObjects(fn func(context.Context, x.Logger, *sql.DB, x.NakamaModule, *api.DeleteStorageObjectsRequest) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterAfterDeleteStorageObjects", fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterAfterDeleteStorageObjects indicates an expected call of RegisterAfterDeleteStorageObjects
func (mr *MockInitializerMockRecorder) RegisterAfterDeleteStorageObjects(fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterAfterDeleteStorageObjects", reflect.TypeOf((*MockInitializer)(nil).RegisterAfterDeleteStorageObjects), fn)
}

// RegisterBeforeJoinTournament mocks base method
func (m *MockInitializer) RegisterBeforeJoinTournament(fn func(context.Context, x.Logger, *sql.DB, x.NakamaModule, *api.JoinTournamentRequest) (*api.JoinTournamentRequest, error)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterBeforeJoinTournament", fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterBeforeJoinTournament indicates an expected call of RegisterBeforeJoinTournament
func (mr *MockInitializerMockRecorder) RegisterBeforeJoinTournament(fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterBeforeJoinTournament", reflect.TypeOf((*MockInitializer)(nil).RegisterBeforeJoinTournament), fn)
}

// RegisterAfterJoinTournament mocks base method
func (m *MockInitializer) RegisterAfterJoinTournament(fn func(context.Context, x.Logger, *sql.DB, x.NakamaModule, *api.JoinTournamentRequest) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterAfterJoinTournament", fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterAfterJoinTournament indicates an expected call of RegisterAfterJoinTournament
func (mr *MockInitializerMockRecorder) RegisterAfterJoinTournament(fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterAfterJoinTournament", reflect.TypeOf((*MockInitializer)(nil).RegisterAfterJoinTournament), fn)
}

// RegisterBeforeListTournamentRecords mocks base method
func (m *MockInitializer) RegisterBeforeListTournamentRecords(fn func(context.Context, x.Logger, *sql.DB, x.NakamaModule, *api.ListTournamentRecordsRequest) (*api.ListTournamentRecordsRequest, error)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterBeforeListTournamentRecords", fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterBeforeListTournamentRecords indicates an expected call of RegisterBeforeListTournamentRecords
func (mr *MockInitializerMockRecorder) RegisterBeforeListTournamentRecords(fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterBeforeListTournamentRecords", reflect.TypeOf((*MockInitializer)(nil).RegisterBeforeListTournamentRecords), fn)
}

// RegisterAfterListTournamentRecords mocks base method
func (m *MockInitializer) RegisterAfterListTournamentRecords(fn func(context.Context, x.Logger, *sql.DB, x.NakamaModule, *api.TournamentRecordList, *api.ListTournamentRecordsRequest) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterAfterListTournamentRecords", fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterAfterListTournamentRecords indicates an expected call of RegisterAfterListTournamentRecords
func (mr *MockInitializerMockRecorder) RegisterAfterListTournamentRecords(fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterAfterListTournamentRecords", reflect.TypeOf((*MockInitializer)(nil).RegisterAfterListTournamentRecords), fn)
}

// RegisterBeforeListTournaments mocks base method
func (m *MockInitializer) RegisterBeforeListTournaments(fn func(context.Context, x.Logger, *sql.DB, x.NakamaModule, *api.ListTournamentsRequest) (*api.ListTournamentsRequest, error)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterBeforeListTournaments", fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterBeforeListTournaments indicates an expected call of RegisterBeforeListTournaments
func (mr *MockInitializerMockRecorder) RegisterBeforeListTournaments(fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterBeforeListTournaments", reflect.TypeOf((*MockInitializer)(nil).RegisterBeforeListTournaments), fn)
}

// RegisterAfterListTournaments mocks base method
func (m *MockInitializer) RegisterAfterListTournaments(fn func(context.Context, x.Logger, *sql.DB, x.NakamaModule, *api.TournamentList, *api.ListTournamentsRequest) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterAfterListTournaments", fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterAfterListTournaments indicates an expected call of RegisterAfterListTournaments
func (mr *MockInitializerMockRecorder) RegisterAfterListTournaments(fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterAfterListTournaments", reflect.TypeOf((*MockInitializer)(nil).RegisterAfterListTournaments), fn)
}

// RegisterBeforeWriteTournamentRecord mocks base method
func (m *MockInitializer) RegisterBeforeWriteTournamentRecord(fn func(context.Context, x.Logger, *sql.DB, x.NakamaModule, *api.WriteTournamentRecordRequest) (*api.WriteTournamentRecordRequest, error)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterBeforeWriteTournamentRecord", fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterBeforeWriteTournamentRecord indicates an expected call of RegisterBeforeWriteTournamentRecord
func (mr *MockInitializerMockRecorder) RegisterBeforeWriteTournamentRecord(fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterBeforeWriteTournamentRecord", reflect.TypeOf((*MockInitializer)(nil).RegisterBeforeWriteTournamentRecord), fn)
}

// RegisterAfterWriteTournamentRecord mocks base method
func (m *MockInitializer) RegisterAfterWriteTournamentRecord(fn func(context.Context, x.Logger, *sql.DB, x.NakamaModule, *api.LeaderboardRecord, *api.WriteTournamentRecordRequest) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterAfterWriteTournamentRecord", fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterAfterWriteTournamentRecord indicates an expected call of RegisterAfterWriteTournamentRecord
func (mr *MockInitializerMockRecorder) RegisterAfterWriteTournamentRecord(fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterAfterWriteTournamentRecord", reflect.TypeOf((*MockInitializer)(nil).RegisterAfterWriteTournamentRecord), fn)
}

// RegisterBeforeListTournamentRecordsAroundOwner mocks base method
func (m *MockInitializer) RegisterBeforeListTournamentRecordsAroundOwner(fn func(context.Context, x.Logger, *sql.DB, x.NakamaModule, *api.ListTournamentRecordsAroundOwnerRequest) (*api.ListTournamentRecordsAroundOwnerRequest, error)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterBeforeListTournamentRecordsAroundOwner", fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterBeforeListTournamentRecordsAroundOwner indicates an expected call of RegisterBeforeListTournamentRecordsAroundOwner
func (mr *MockInitializerMockRecorder) RegisterBeforeListTournamentRecordsAroundOwner(fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterBeforeListTournamentRecordsAroundOwner", reflect.TypeOf((*MockInitializer)(nil).RegisterBeforeListTournamentRecordsAroundOwner), fn)
}

// RegisterAfterListTournamentRecordsAroundOwner mocks base method
func (m *MockInitializer) RegisterAfterListTournamentRecordsAroundOwner(fn func(context.Context, x.Logger, *sql.DB, x.NakamaModule, *api.TournamentRecordList, *api.ListTournamentRecordsAroundOwnerRequest) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterAfterListTournamentRecordsAroundOwner", fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterAfterListTournamentRecordsAroundOwner indicates an expected call of RegisterAfterListTournamentRecordsAroundOwner
func (mr *MockInitializerMockRecorder) RegisterAfterListTournamentRecordsAroundOwner(fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterAfterListTournamentRecordsAroundOwner", reflect.TypeOf((*MockInitializer)(nil).RegisterAfterListTournamentRecordsAroundOwner), fn)
}

// RegisterBeforeUnlinkCustom mocks base method
func (m *MockInitializer) RegisterBeforeUnlinkCustom(fn func(context.Context, x.Logger, *sql.DB, x.NakamaModule, *api.AccountCustom) (*api.AccountCustom, error)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterBeforeUnlinkCustom", fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterBeforeUnlinkCustom indicates an expected call of RegisterBeforeUnlinkCustom
func (mr *MockInitializerMockRecorder) RegisterBeforeUnlinkCustom(fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterBeforeUnlinkCustom", reflect.TypeOf((*MockInitializer)(nil).RegisterBeforeUnlinkCustom), fn)
}

// RegisterAfterUnlinkCustom mocks base method
func (m *MockInitializer) RegisterAfterUnlinkCustom(fn func(context.Context, x.Logger, *sql.DB, x.NakamaModule, *api.AccountCustom) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterAfterUnlinkCustom", fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterAfterUnlinkCustom indicates an expected call of RegisterAfterUnlinkCustom
func (mr *MockInitializerMockRecorder) RegisterAfterUnlinkCustom(fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterAfterUnlinkCustom", reflect.TypeOf((*MockInitializer)(nil).RegisterAfterUnlinkCustom), fn)
}

// RegisterBeforeUnlinkDevice mocks base method
func (m *MockInitializer) RegisterBeforeUnlinkDevice(fn func(context.Context, x.Logger, *sql.DB, x.NakamaModule, *api.AccountDevice) (*api.AccountDevice, error)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterBeforeUnlinkDevice", fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterBeforeUnlinkDevice indicates an expected call of RegisterBeforeUnlinkDevice
func (mr *MockInitializerMockRecorder) RegisterBeforeUnlinkDevice(fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterBeforeUnlinkDevice", reflect.TypeOf((*MockInitializer)(nil).RegisterBeforeUnlinkDevice), fn)
}

// RegisterAfterUnlinkDevice mocks base method
func (m *MockInitializer) RegisterAfterUnlinkDevice(fn func(context.Context, x.Logger, *sql.DB, x.NakamaModule, *api.AccountDevice) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterAfterUnlinkDevice", fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterAfterUnlinkDevice indicates an expected call of RegisterAfterUnlinkDevice
func (mr *MockInitializerMockRecorder) RegisterAfterUnlinkDevice(fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterAfterUnlinkDevice", reflect.TypeOf((*MockInitializer)(nil).RegisterAfterUnlinkDevice), fn)
}

// RegisterBeforeUnlinkEmail mocks base method
func (m *MockInitializer) RegisterBeforeUnlinkEmail(fn func(context.Context, x.Logger, *sql.DB, x.NakamaModule, *api.AccountEmail) (*api.AccountEmail, error)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterBeforeUnlinkEmail", fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterBeforeUnlinkEmail indicates an expected call of RegisterBeforeUnlinkEmail
func (mr *MockInitializerMockRecorder) RegisterBeforeUnlinkEmail(fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterBeforeUnlinkEmail", reflect.TypeOf((*MockInitializer)(nil).RegisterBeforeUnlinkEmail), fn)
}

// RegisterAfterUnlinkEmail mocks base method
func (m *MockInitializer) RegisterAfterUnlinkEmail(fn func(context.Context, x.Logger, *sql.DB, x.NakamaModule, *api.AccountEmail) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterAfterUnlinkEmail", fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterAfterUnlinkEmail indicates an expected call of RegisterAfterUnlinkEmail
func (mr *MockInitializerMockRecorder) RegisterAfterUnlinkEmail(fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterAfterUnlinkEmail", reflect.TypeOf((*MockInitializer)(nil).RegisterAfterUnlinkEmail), fn)
}

// RegisterBeforeUnlinkFacebook mocks base method
func (m *MockInitializer) RegisterBeforeUnlinkFacebook(fn func(context.Context, x.Logger, *sql.DB, x.NakamaModule, *api.AccountFacebook) (*api.AccountFacebook, error)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterBeforeUnlinkFacebook", fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterBeforeUnlinkFacebook indicates an expected call of RegisterBeforeUnlinkFacebook
func (mr *MockInitializerMockRecorder) RegisterBeforeUnlinkFacebook(fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterBeforeUnlinkFacebook", reflect.TypeOf((*MockInitializer)(nil).RegisterBeforeUnlinkFacebook), fn)
}

// RegisterAfterUnlinkFacebook mocks base method
func (m *MockInitializer) RegisterAfterUnlinkFacebook(fn func(context.Context, x.Logger, *sql.DB, x.NakamaModule, *api.AccountFacebook) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterAfterUnlinkFacebook", fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterAfterUnlinkFacebook indicates an expected call of RegisterAfterUnlinkFacebook
func (mr *MockInitializerMockRecorder) RegisterAfterUnlinkFacebook(fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterAfterUnlinkFacebook", reflect.TypeOf((*MockInitializer)(nil).RegisterAfterUnlinkFacebook), fn)
}

// RegisterBeforeUnlinkGameCenter mocks base method
func (m *MockInitializer) RegisterBeforeUnlinkGameCenter(fn func(context.Context, x.Logger, *sql.DB, x.NakamaModule, *api.AccountGameCenter) (*api.AccountGameCenter, error)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterBeforeUnlinkGameCenter", fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterBeforeUnlinkGameCenter indicates an expected call of RegisterBeforeUnlinkGameCenter
func (mr *MockInitializerMockRecorder) RegisterBeforeUnlinkGameCenter(fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterBeforeUnlinkGameCenter", reflect.TypeOf((*MockInitializer)(nil).RegisterBeforeUnlinkGameCenter), fn)
}

// RegisterAfterUnlinkGameCenter mocks base method
func (m *MockInitializer) RegisterAfterUnlinkGameCenter(fn func(context.Context, x.Logger, *sql.DB, x.NakamaModule, *api.AccountGameCenter) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterAfterUnlinkGameCenter", fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterAfterUnlinkGameCenter indicates an expected call of RegisterAfterUnlinkGameCenter
func (mr *MockInitializerMockRecorder) RegisterAfterUnlinkGameCenter(fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterAfterUnlinkGameCenter", reflect.TypeOf((*MockInitializer)(nil).RegisterAfterUnlinkGameCenter), fn)
}

// RegisterBeforeUnlinkGoogle mocks base method
func (m *MockInitializer) RegisterBeforeUnlinkGoogle(fn func(context.Context, x.Logger, *sql.DB, x.NakamaModule, *api.AccountGoogle) (*api.AccountGoogle, error)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterBeforeUnlinkGoogle", fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterBeforeUnlinkGoogle indicates an expected call of RegisterBeforeUnlinkGoogle
func (mr *MockInitializerMockRecorder) RegisterBeforeUnlinkGoogle(fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterBeforeUnlinkGoogle", reflect.TypeOf((*MockInitializer)(nil).RegisterBeforeUnlinkGoogle), fn)
}

// RegisterAfterUnlinkGoogle mocks base method
func (m *MockInitializer) RegisterAfterUnlinkGoogle(fn func(context.Context, x.Logger, *sql.DB, x.NakamaModule, *api.AccountGoogle) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterAfterUnlinkGoogle", fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterAfterUnlinkGoogle indicates an expected call of RegisterAfterUnlinkGoogle
func (mr *MockInitializerMockRecorder) RegisterAfterUnlinkGoogle(fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterAfterUnlinkGoogle", reflect.TypeOf((*MockInitializer)(nil).RegisterAfterUnlinkGoogle), fn)
}

// RegisterBeforeUnlinkSteam mocks base method
func (m *MockInitializer) RegisterBeforeUnlinkSteam(fn func(context.Context, x.Logger, *sql.DB, x.NakamaModule, *api.AccountSteam) (*api.AccountSteam, error)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterBeforeUnlinkSteam", fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterBeforeUnlinkSteam indicates an expected call of RegisterBeforeUnlinkSteam
func (mr *MockInitializerMockRecorder) RegisterBeforeUnlinkSteam(fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterBeforeUnlinkSteam", reflect.TypeOf((*MockInitializer)(nil).RegisterBeforeUnlinkSteam), fn)
}

// RegisterAfterUnlinkSteam mocks base method
func (m *MockInitializer) RegisterAfterUnlinkSteam(fn func(context.Context, x.Logger, *sql.DB, x.NakamaModule, *api.AccountSteam) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterAfterUnlinkSteam", fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterAfterUnlinkSteam indicates an expected call of RegisterAfterUnlinkSteam
func (mr *MockInitializerMockRecorder) RegisterAfterUnlinkSteam(fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterAfterUnlinkSteam", reflect.TypeOf((*MockInitializer)(nil).RegisterAfterUnlinkSteam), fn)
}

// RegisterBeforeGetUsers mocks base method
func (m *MockInitializer) RegisterBeforeGetUsers(fn func(context.Context, x.Logger, *sql.DB, x.NakamaModule, *api.GetUsersRequest) (*api.GetUsersRequest, error)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterBeforeGetUsers", fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterBeforeGetUsers indicates an expected call of RegisterBeforeGetUsers
func (mr *MockInitializerMockRecorder) RegisterBeforeGetUsers(fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterBeforeGetUsers", reflect.TypeOf((*MockInitializer)(nil).RegisterBeforeGetUsers), fn)
}

// RegisterAfterGetUsers mocks base method
func (m *MockInitializer) RegisterAfterGetUsers(fn func(context.Context, x.Logger, *sql.DB, x.NakamaModule, *api.Users, *api.GetUsersRequest) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterAfterGetUsers", fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterAfterGetUsers indicates an expected call of RegisterAfterGetUsers
func (mr *MockInitializerMockRecorder) RegisterAfterGetUsers(fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterAfterGetUsers", reflect.TypeOf((*MockInitializer)(nil).RegisterAfterGetUsers), fn)
}

// MockLeaderboard is a mock of Leaderboard interface
type MockLeaderboard struct {
	ctrl     *gomock.Controller
	recorder *MockLeaderboardMockRecorder
}

// MockLeaderboardMockRecorder is the mock recorder for MockLeaderboard
type MockLeaderboardMockRecorder struct {
	mock *MockLeaderboard
}

// NewMockLeaderboard creates a new mock instance
func NewMockLeaderboard(ctrl *gomock.Controller) *MockLeaderboard {
	mock := &MockLeaderboard{ctrl: ctrl}
	mock.recorder = &MockLeaderboardMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLeaderboard) EXPECT() *MockLeaderboardMockRecorder {
	return m.recorder
}

// GetId mocks base method
func (m *MockLeaderboard) GetId() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetId")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetId indicates an expected call of GetId
func (mr *MockLeaderboardMockRecorder) GetId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetId", reflect.TypeOf((*MockLeaderboard)(nil).GetId))
}

// GetAuthoritative mocks base method
func (m *MockLeaderboard) GetAuthoritative() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthoritative")
	ret0, _ := ret[0].(bool)
	return ret0
}

// GetAuthoritative indicates an expected call of GetAuthoritative
func (mr *MockLeaderboardMockRecorder) GetAuthoritative() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthoritative", reflect.TypeOf((*MockLeaderboard)(nil).GetAuthoritative))
}

// GetSortOrder mocks base method
func (m *MockLeaderboard) GetSortOrder() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSortOrder")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetSortOrder indicates an expected call of GetSortOrder
func (mr *MockLeaderboardMockRecorder) GetSortOrder() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSortOrder", reflect.TypeOf((*MockLeaderboard)(nil).GetSortOrder))
}

// GetOperator mocks base method
func (m *MockLeaderboard) GetOperator() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOperator")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetOperator indicates an expected call of GetOperator
func (mr *MockLeaderboardMockRecorder) GetOperator() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperator", reflect.TypeOf((*MockLeaderboard)(nil).GetOperator))
}

// GetReset mocks base method
func (m *MockLeaderboard) GetReset() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReset")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetReset indicates an expected call of GetReset
func (mr *MockLeaderboardMockRecorder) GetReset() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReset", reflect.TypeOf((*MockLeaderboard)(nil).GetReset))
}

// GetMetadata mocks base method
func (m *MockLeaderboard) GetMetadata() map[string]interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetadata")
	ret0, _ := ret[0].(map[string]interface{})
	return ret0
}

// GetMetadata indicates an expected call of GetMetadata
func (mr *MockLeaderboardMockRecorder) GetMetadata() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetadata", reflect.TypeOf((*MockLeaderboard)(nil).GetMetadata))
}

// GetCreateTime mocks base method
func (m *MockLeaderboard) GetCreateTime() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCreateTime")
	ret0, _ := ret[0].(int64)
	return ret0
}

// GetCreateTime indicates an expected call of GetCreateTime
func (mr *MockLeaderboardMockRecorder) GetCreateTime() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCreateTime", reflect.TypeOf((*MockLeaderboard)(nil).GetCreateTime))
}

// MockPresenceMeta is a mock of PresenceMeta interface
type MockPresenceMeta struct {
	ctrl     *gomock.Controller
	recorder *MockPresenceMetaMockRecorder
}

// MockPresenceMetaMockRecorder is the mock recorder for MockPresenceMeta
type MockPresenceMetaMockRecorder struct {
	mock *MockPresenceMeta
}

// NewMockPresenceMeta creates a new mock instance
func NewMockPresenceMeta(ctrl *gomock.Controller) *MockPresenceMeta {
	mock := &MockPresenceMeta{ctrl: ctrl}
	mock.recorder = &MockPresenceMetaMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPresenceMeta) EXPECT() *MockPresenceMetaMockRecorder {
	return m.recorder
}

// GetHidden mocks base method
func (m *MockPresenceMeta) GetHidden() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHidden")
	ret0, _ := ret[0].(bool)
	return ret0
}

// GetHidden indicates an expected call of GetHidden
func (mr *MockPresenceMetaMockRecorder) GetHidden() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHidden", reflect.TypeOf((*MockPresenceMeta)(nil).GetHidden))
}

// GetPersistence mocks base method
func (m *MockPresenceMeta) GetPersistence() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPersistence")
	ret0, _ := ret[0].(bool)
	return ret0
}

// GetPersistence indicates an expected call of GetPersistence
func (mr *MockPresenceMetaMockRecorder) GetPersistence() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPersistence", reflect.TypeOf((*MockPresenceMeta)(nil).GetPersistence))
}

// GetUsername mocks base method
func (m *MockPresenceMeta) GetUsername() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsername")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetUsername indicates an expected call of GetUsername
func (mr *MockPresenceMetaMockRecorder) GetUsername() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsername", reflect.TypeOf((*MockPresenceMeta)(nil).GetUsername))
}

// GetStatus mocks base method
func (m *MockPresenceMeta) GetStatus() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatus")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetStatus indicates an expected call of GetStatus
func (mr *MockPresenceMetaMockRecorder) GetStatus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatus", reflect.TypeOf((*MockPresenceMeta)(nil).GetStatus))
}

// MockPresence is a mock of Presence interface
type MockPresence struct {
	ctrl     *gomock.Controller
	recorder *MockPresenceMockRecorder
}

// MockPresenceMockRecorder is the mock recorder for MockPresence
type MockPresenceMockRecorder struct {
	mock *MockPresence
}

// NewMockPresence creates a new mock instance
func NewMockPresence(ctrl *gomock.Controller) *MockPresence {
	mock := &MockPresence{ctrl: ctrl}
	mock.recorder = &MockPresenceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPresence) EXPECT() *MockPresenceMockRecorder {
	return m.recorder
}

// GetHidden mocks base method
func (m *MockPresence) GetHidden() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHidden")
	ret0, _ := ret[0].(bool)
	return ret0
}

// GetHidden indicates an expected call of GetHidden
func (mr *MockPresenceMockRecorder) GetHidden() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHidden", reflect.TypeOf((*MockPresence)(nil).GetHidden))
}

// GetPersistence mocks base method
func (m *MockPresence) GetPersistence() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPersistence")
	ret0, _ := ret[0].(bool)
	return ret0
}

// GetPersistence indicates an expected call of GetPersistence
func (mr *MockPresenceMockRecorder) GetPersistence() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPersistence", reflect.TypeOf((*MockPresence)(nil).GetPersistence))
}

// GetUsername mocks base method
func (m *MockPresence) GetUsername() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsername")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetUsername indicates an expected call of GetUsername
func (mr *MockPresenceMockRecorder) GetUsername() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsername", reflect.TypeOf((*MockPresence)(nil).GetUsername))
}

// GetStatus mocks base method
func (m *MockPresence) GetStatus() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatus")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetStatus indicates an expected call of GetStatus
func (mr *MockPresenceMockRecorder) GetStatus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatus", reflect.TypeOf((*MockPresence)(nil).GetStatus))
}

// GetUserId mocks base method
func (m *MockPresence) GetUserId() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserId")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetUserId indicates an expected call of GetUserId
func (mr *MockPresenceMockRecorder) GetUserId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserId", reflect.TypeOf((*MockPresence)(nil).GetUserId))
}

// GetSessionId mocks base method
func (m *MockPresence) GetSessionId() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSessionId")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetSessionId indicates an expected call of GetSessionId
func (mr *MockPresenceMockRecorder) GetSessionId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSessionId", reflect.TypeOf((*MockPresence)(nil).GetSessionId))
}

// GetNodeId mocks base method
func (m *MockPresence) GetNodeId() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodeId")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetNodeId indicates an expected call of GetNodeId
func (mr *MockPresenceMockRecorder) GetNodeId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodeId", reflect.TypeOf((*MockPresence)(nil).GetNodeId))
}

// MockMatchmakerEntry is a mock of MatchmakerEntry interface
type MockMatchmakerEntry struct {
	ctrl     *gomock.Controller
	recorder *MockMatchmakerEntryMockRecorder
}

// MockMatchmakerEntryMockRecorder is the mock recorder for MockMatchmakerEntry
type MockMatchmakerEntryMockRecorder struct {
	mock *MockMatchmakerEntry
}

// NewMockMatchmakerEntry creates a new mock instance
func NewMockMatchmakerEntry(ctrl *gomock.Controller) *MockMatchmakerEntry {
	mock := &MockMatchmakerEntry{ctrl: ctrl}
	mock.recorder = &MockMatchmakerEntryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMatchmakerEntry) EXPECT() *MockMatchmakerEntryMockRecorder {
	return m.recorder
}

// GetPresence mocks base method
func (m *MockMatchmakerEntry) GetPresence() x.Presence {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPresence")
	ret0, _ := ret[0].(x.Presence)
	return ret0
}

// GetPresence indicates an expected call of GetPresence
func (mr *MockMatchmakerEntryMockRecorder) GetPresence() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPresence", reflect.TypeOf((*MockMatchmakerEntry)(nil).GetPresence))
}

// GetTicket mocks base method
func (m *MockMatchmakerEntry) GetTicket() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTicket")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetTicket indicates an expected call of GetTicket
func (mr *MockMatchmakerEntryMockRecorder) GetTicket() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTicket", reflect.TypeOf((*MockMatchmakerEntry)(nil).GetTicket))
}

// GetProperties mocks base method
func (m *MockMatchmakerEntry) GetProperties() map[string]interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProperties")
	ret0, _ := ret[0].(map[string]interface{})
	return ret0
}

// GetProperties indicates an expected call of GetProperties
func (mr *MockMatchmakerEntryMockRecorder) GetProperties() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProperties", reflect.TypeOf((*MockMatchmakerEntry)(nil).GetProperties))
}

// MockMatchData is a mock of MatchData interface
type MockMatchData struct {
	ctrl     *gomock.Controller
	recorder *MockMatchDataMockRecorder
}

// MockMatchDataMockRecorder is the mock recorder for MockMatchData
type MockMatchDataMockRecorder struct {
	mock *MockMatchData
}

// NewMockMatchData creates a new mock instance
func NewMockMatchData(ctrl *gomock.Controller) *MockMatchData {
	mock := &MockMatchData{ctrl: ctrl}
	mock.recorder = &MockMatchDataMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMatchData) EXPECT() *MockMatchDataMockRecorder {
	return m.recorder
}

// GetHidden mocks base method
func (m *MockMatchData) GetHidden() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHidden")
	ret0, _ := ret[0].(bool)
	return ret0
}

// GetHidden indicates an expected call of GetHidden
func (mr *MockMatchDataMockRecorder) GetHidden() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHidden", reflect.TypeOf((*MockMatchData)(nil).GetHidden))
}

// GetPersistence mocks base method
func (m *MockMatchData) GetPersistence() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPersistence")
	ret0, _ := ret[0].(bool)
	return ret0
}

// GetPersistence indicates an expected call of GetPersistence
func (mr *MockMatchDataMockRecorder) GetPersistence() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPersistence", reflect.TypeOf((*MockMatchData)(nil).GetPersistence))
}

// GetUsername mocks base method
func (m *MockMatchData) GetUsername() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsername")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetUsername indicates an expected call of GetUsername
func (mr *MockMatchDataMockRecorder) GetUsername() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsername", reflect.TypeOf((*MockMatchData)(nil).GetUsername))
}

// GetStatus mocks base method
func (m *MockMatchData) GetStatus() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatus")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetStatus indicates an expected call of GetStatus
func (mr *MockMatchDataMockRecorder) GetStatus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatus", reflect.TypeOf((*MockMatchData)(nil).GetStatus))
}

// GetUserId mocks base method
func (m *MockMatchData) GetUserId() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserId")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetUserId indicates an expected call of GetUserId
func (mr *MockMatchDataMockRecorder) GetUserId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserId", reflect.TypeOf((*MockMatchData)(nil).GetUserId))
}

// GetSessionId mocks base method
func (m *MockMatchData) GetSessionId() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSessionId")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetSessionId indicates an expected call of GetSessionId
func (mr *MockMatchDataMockRecorder) GetSessionId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSessionId", reflect.TypeOf((*MockMatchData)(nil).GetSessionId))
}

// GetNodeId mocks base method
func (m *MockMatchData) GetNodeId() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodeId")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetNodeId indicates an expected call of GetNodeId
func (mr *MockMatchDataMockRecorder) GetNodeId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodeId", reflect.TypeOf((*MockMatchData)(nil).GetNodeId))
}

// GetOpCode mocks base method
func (m *MockMatchData) GetOpCode() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOpCode")
	ret0, _ := ret[0].(int64)
	return ret0
}

// GetOpCode indicates an expected call of GetOpCode
func (mr *MockMatchDataMockRecorder) GetOpCode() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOpCode", reflect.TypeOf((*MockMatchData)(nil).GetOpCode))
}

// GetData mocks base method
func (m *MockMatchData) GetData() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetData")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// GetData indicates an expected call of GetData
func (mr *MockMatchDataMockRecorder) GetData() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetData", reflect.TypeOf((*MockMatchData)(nil).GetData))
}

// GetReceiveTime mocks base method
func (m *MockMatchData) GetReceiveTime() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReceiveTime")
	ret0, _ := ret[0].(int64)
	return ret0
}

// GetReceiveTime indicates an expected call of GetReceiveTime
func (mr *MockMatchDataMockRecorder) GetReceiveTime() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReceiveTime", reflect.TypeOf((*MockMatchData)(nil).GetReceiveTime))
}

// MockMatchDispatcher is a mock of MatchDispatcher interface
type MockMatchDispatcher struct {
	ctrl     *gomock.Controller
	recorder *MockMatchDispatcherMockRecorder
}

// MockMatchDispatcherMockRecorder is the mock recorder for MockMatchDispatcher
type MockMatchDispatcherMockRecorder struct {
	mock *MockMatchDispatcher
}

// NewMockMatchDispatcher creates a new mock instance
func NewMockMatchDispatcher(ctrl *gomock.Controller) *MockMatchDispatcher {
	mock := &MockMatchDispatcher{ctrl: ctrl}
	mock.recorder = &MockMatchDispatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMatchDispatcher) EXPECT() *MockMatchDispatcherMockRecorder {
	return m.recorder
}

// BroadcastMessage mocks base method
func (m *MockMatchDispatcher) BroadcastMessage(opCode int64, data []byte, presences []x.Presence, sender x.Presence) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BroadcastMessage", opCode, data, presences, sender)
	ret0, _ := ret[0].(error)
	return ret0
}

// BroadcastMessage indicates an expected call of BroadcastMessage
func (mr *MockMatchDispatcherMockRecorder) BroadcastMessage(opCode, data, presences, sender interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BroadcastMessage", reflect.TypeOf((*MockMatchDispatcher)(nil).BroadcastMessage), opCode, data, presences, sender)
}

// BroadcastMessageDeferred mocks base method
func (m *MockMatchDispatcher) BroadcastMessageDeferred(opCode int64, data []byte, presences []x.Presence, sender x.Presence) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BroadcastMessageDeferred", opCode, data, presences, sender)
	ret0, _ := ret[0].(error)
	return ret0
}

// BroadcastMessageDeferred indicates an expected call of BroadcastMessageDeferred
func (mr *MockMatchDispatcherMockRecorder) BroadcastMessageDeferred(opCode, data, presences, sender interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BroadcastMessageDeferred", reflect.TypeOf((*MockMatchDispatcher)(nil).BroadcastMessageDeferred), opCode, data, presences, sender)
}

// MatchKick mocks base method
func (m *MockMatchDispatcher) MatchKick(presences []x.Presence) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MatchKick", presences)
	ret0, _ := ret[0].(error)
	return ret0
}

// MatchKick indicates an expected call of MatchKick
func (mr *MockMatchDispatcherMockRecorder) MatchKick(presences interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MatchKick", reflect.TypeOf((*MockMatchDispatcher)(nil).MatchKick), presences)
}

// MatchLabelUpdate mocks base method
func (m *MockMatchDispatcher) MatchLabelUpdate(label string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MatchLabelUpdate", label)
	ret0, _ := ret[0].(error)
	return ret0
}

// MatchLabelUpdate indicates an expected call of MatchLabelUpdate
func (mr *MockMatchDispatcherMockRecorder) MatchLabelUpdate(label interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MatchLabelUpdate", reflect.TypeOf((*MockMatchDispatcher)(nil).MatchLabelUpdate), label)
}

// MockMatch is a mock of Match interface
type MockMatch struct {
	ctrl     *gomock.Controller
	recorder *MockMatchMockRecorder
}

// MockMatchMockRecorder is the mock recorder for MockMatch
type MockMatchMockRecorder struct {
	mock *MockMatch
}

// NewMockMatch creates a new mock instance
func NewMockMatch(ctrl *gomock.Controller) *MockMatch {
	mock := &MockMatch{ctrl: ctrl}
	mock.recorder = &MockMatchMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMatch) EXPECT() *MockMatchMockRecorder {
	return m.recorder
}

// MatchInit mocks base method
func (m *MockMatch) MatchInit(ctx context.Context, logger x.Logger, db *sql.DB, nk x.NakamaModule, params map[string]interface{}) (interface{}, int, string) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MatchInit", ctx, logger, db, nk, params)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(string)
	return ret0, ret1, ret2
}

// MatchInit indicates an expected call of MatchInit
func (mr *MockMatchMockRecorder) MatchInit(ctx, logger, db, nk, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MatchInit", reflect.TypeOf((*MockMatch)(nil).MatchInit), ctx, logger, db, nk, params)
}

// MatchJoinAttempt mocks base method
func (m *MockMatch) MatchJoinAttempt(ctx context.Context, logger x.Logger, db *sql.DB, nk x.NakamaModule, dispatcher x.MatchDispatcher, tick int64, state interface{}, presence x.Presence, metadata map[string]string) (interface{}, bool, string) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MatchJoinAttempt", ctx, logger, db, nk, dispatcher, tick, state, presence, metadata)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(string)
	return ret0, ret1, ret2
}

// MatchJoinAttempt indicates an expected call of MatchJoinAttempt
func (mr *MockMatchMockRecorder) MatchJoinAttempt(ctx, logger, db, nk, dispatcher, tick, state, presence, metadata interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MatchJoinAttempt", reflect.TypeOf((*MockMatch)(nil).MatchJoinAttempt), ctx, logger, db, nk, dispatcher, tick, state, presence, metadata)
}

// MatchJoin mocks base method
func (m *MockMatch) MatchJoin(ctx context.Context, logger x.Logger, db *sql.DB, nk x.NakamaModule, dispatcher x.MatchDispatcher, tick int64, state interface{}, presences []x.Presence) interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MatchJoin", ctx, logger, db, nk, dispatcher, tick, state, presences)
	ret0, _ := ret[0].(interface{})
	return ret0
}

// MatchJoin indicates an expected call of MatchJoin
func (mr *MockMatchMockRecorder) MatchJoin(ctx, logger, db, nk, dispatcher, tick, state, presences interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MatchJoin", reflect.TypeOf((*MockMatch)(nil).MatchJoin), ctx, logger, db, nk, dispatcher, tick, state, presences)
}

// MatchLeave mocks base method
func (m *MockMatch) MatchLeave(ctx context.Context, logger x.Logger, db *sql.DB, nk x.NakamaModule, dispatcher x.MatchDispatcher, tick int64, state interface{}, presences []x.Presence) interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MatchLeave", ctx, logger, db, nk, dispatcher, tick, state, presences)
	ret0, _ := ret[0].(interface{})
	return ret0
}

// MatchLeave indicates an expected call of MatchLeave
func (mr *MockMatchMockRecorder) MatchLeave(ctx, logger, db, nk, dispatcher, tick, state, presences interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MatchLeave", reflect.TypeOf((*MockMatch)(nil).MatchLeave), ctx, logger, db, nk, dispatcher, tick, state, presences)
}

// MatchLoop mocks base method
func (m *MockMatch) MatchLoop(ctx context.Context, logger x.Logger, db *sql.DB, nk x.NakamaModule, dispatcher x.MatchDispatcher, tick int64, state interface{}, messages []x.MatchData) interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MatchLoop", ctx, logger, db, nk, dispatcher, tick, state, messages)
	ret0, _ := ret[0].(interface{})
	return ret0
}

// MatchLoop indicates an expected call of MatchLoop
func (mr *MockMatchMockRecorder) MatchLoop(ctx, logger, db, nk, dispatcher, tick, state, messages interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MatchLoop", reflect.TypeOf((*MockMatch)(nil).MatchLoop), ctx, logger, db, nk, dispatcher, tick, state, messages)
}

// MatchTerminate mocks base method
func (m *MockMatch) MatchTerminate(ctx context.Context, logger x.Logger, db *sql.DB, nk x.NakamaModule, dispatcher x.MatchDispatcher, tick int64, state interface{}, graceSeconds int) interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MatchTerminate", ctx, logger, db, nk, dispatcher, tick, state, graceSeconds)
	ret0, _ := ret[0].(interface{})
	return ret0
}

// MatchTerminate indicates an expected call of MatchTerminate
func (mr *MockMatchMockRecorder) MatchTerminate(ctx, logger, db, nk, dispatcher, tick, state, graceSeconds interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MatchTerminate", reflect.TypeOf((*MockMatch)(nil).MatchTerminate), ctx, logger, db, nk, dispatcher, tick, state, graceSeconds)
}

// MockWalletLedgerItem is a mock of WalletLedgerItem interface
type MockWalletLedgerItem struct {
	ctrl     *gomock.Controller
	recorder *MockWalletLedgerItemMockRecorder
}

// MockWalletLedgerItemMockRecorder is the mock recorder for MockWalletLedgerItem
type MockWalletLedgerItemMockRecorder struct {
	mock *MockWalletLedgerItem
}

// NewMockWalletLedgerItem creates a new mock instance
func NewMockWalletLedgerItem(ctrl *gomock.Controller) *MockWalletLedgerItem {
	mock := &MockWalletLedgerItem{ctrl: ctrl}
	mock.recorder = &MockWalletLedgerItemMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWalletLedgerItem) EXPECT() *MockWalletLedgerItemMockRecorder {
	return m.recorder
}

// GetID mocks base method
func (m *MockWalletLedgerItem) GetID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetID")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetID indicates an expected call of GetID
func (mr *MockWalletLedgerItemMockRecorder) GetID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetID", reflect.TypeOf((*MockWalletLedgerItem)(nil).GetID))
}

// GetUserID mocks base method
func (m *MockWalletLedgerItem) GetUserID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserID")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetUserID indicates an expected call of GetUserID
func (mr *MockWalletLedgerItemMockRecorder) GetUserID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserID", reflect.TypeOf((*MockWalletLedgerItem)(nil).GetUserID))
}

// GetCreateTime mocks base method
func (m *MockWalletLedgerItem) GetCreateTime() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCreateTime")
	ret0, _ := ret[0].(int64)
	return ret0
}

// GetCreateTime indicates an expected call of GetCreateTime
func (mr *MockWalletLedgerItemMockRecorder) GetCreateTime() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCreateTime", reflect.TypeOf((*MockWalletLedgerItem)(nil).GetCreateTime))
}

// GetUpdateTime mocks base method
func (m *MockWalletLedgerItem) GetUpdateTime() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUpdateTime")
	ret0, _ := ret[0].(int64)
	return ret0
}

// GetUpdateTime indicates an expected call of GetUpdateTime
func (mr *MockWalletLedgerItemMockRecorder) GetUpdateTime() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUpdateTime", reflect.TypeOf((*MockWalletLedgerItem)(nil).GetUpdateTime))
}

// GetChangeset mocks base method
func (m *MockWalletLedgerItem) GetChangeset() map[string]interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChangeset")
	ret0, _ := ret[0].(map[string]interface{})
	return ret0
}

// GetChangeset indicates an expected call of GetChangeset
func (mr *MockWalletLedgerItemMockRecorder) GetChangeset() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChangeset", reflect.TypeOf((*MockWalletLedgerItem)(nil).GetChangeset))
}

// GetMetadata mocks base method
func (m *MockWalletLedgerItem) GetMetadata() map[string]interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetadata")
	ret0, _ := ret[0].(map[string]interface{})
	return ret0
}

// GetMetadata indicates an expected call of GetMetadata
func (mr *MockWalletLedgerItemMockRecorder) GetMetadata() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetadata", reflect.TypeOf((*MockWalletLedgerItem)(nil).GetMetadata))
}

// MockNakamaModule is a mock of NakamaModule interface
type MockNakamaModule struct {
	ctrl     *gomock.Controller
	recorder *MockNakamaModuleMockRecorder
}

// MockNakamaModuleMockRecorder is the mock recorder for MockNakamaModule
type MockNakamaModuleMockRecorder struct {
	mock *MockNakamaModule
}

// NewMockNakamaModule creates a new mock instance
func NewMockNakamaModule(ctrl *gomock.Controller) *MockNakamaModule {
	mock := &MockNakamaModule{ctrl: ctrl}
	mock.recorder = &MockNakamaModuleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNakamaModule) EXPECT() *MockNakamaModuleMockRecorder {
	return m.recorder
}

// AuthenticateCustom mocks base method
func (m *MockNakamaModule) AuthenticateCustom(ctx context.Context, id, username string, create bool) (string, string, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthenticateCustom", ctx, id, username, create)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(bool)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// AuthenticateCustom indicates an expected call of AuthenticateCustom
func (mr *MockNakamaModuleMockRecorder) AuthenticateCustom(ctx, id, username, create interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthenticateCustom", reflect.TypeOf((*MockNakamaModule)(nil).AuthenticateCustom), ctx, id, username, create)
}

// AuthenticateDevice mocks base method
func (m *MockNakamaModule) AuthenticateDevice(ctx context.Context, id, username string, create bool) (string, string, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthenticateDevice", ctx, id, username, create)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(bool)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// AuthenticateDevice indicates an expected call of AuthenticateDevice
func (mr *MockNakamaModuleMockRecorder) AuthenticateDevice(ctx, id, username, create interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthenticateDevice", reflect.TypeOf((*MockNakamaModule)(nil).AuthenticateDevice), ctx, id, username, create)
}

// AuthenticateEmail mocks base method
func (m *MockNakamaModule) AuthenticateEmail(ctx context.Context, email, password, username string, create bool) (string, string, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthenticateEmail", ctx, email, password, username, create)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(bool)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// AuthenticateEmail indicates an expected call of AuthenticateEmail
func (mr *MockNakamaModuleMockRecorder) AuthenticateEmail(ctx, email, password, username, create interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthenticateEmail", reflect.TypeOf((*MockNakamaModule)(nil).AuthenticateEmail), ctx, email, password, username, create)
}

// AuthenticateFacebook mocks base method
func (m *MockNakamaModule) AuthenticateFacebook(ctx context.Context, token string, importFriends bool, username string, create bool) (string, string, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthenticateFacebook", ctx, token, importFriends, username, create)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(bool)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// AuthenticateFacebook indicates an expected call of AuthenticateFacebook
func (mr *MockNakamaModuleMockRecorder) AuthenticateFacebook(ctx, token, importFriends, username, create interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthenticateFacebook", reflect.TypeOf((*MockNakamaModule)(nil).AuthenticateFacebook), ctx, token, importFriends, username, create)
}

// AuthenticateGameCenter mocks base method
func (m *MockNakamaModule) AuthenticateGameCenter(ctx context.Context, playerID, bundleID string, timestamp int64, salt, signature, publicKeyUrl, username string, create bool) (string, string, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthenticateGameCenter", ctx, playerID, bundleID, timestamp, salt, signature, publicKeyUrl, username, create)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(bool)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// AuthenticateGameCenter indicates an expected call of AuthenticateGameCenter
func (mr *MockNakamaModuleMockRecorder) AuthenticateGameCenter(ctx, playerID, bundleID, timestamp, salt, signature, publicKeyUrl, username, create interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthenticateGameCenter", reflect.TypeOf((*MockNakamaModule)(nil).AuthenticateGameCenter), ctx, playerID, bundleID, timestamp, salt, signature, publicKeyUrl, username, create)
}

// AuthenticateGoogle mocks base method
func (m *MockNakamaModule) AuthenticateGoogle(ctx context.Context, token, username string, create bool) (string, string, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthenticateGoogle", ctx, token, username, create)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(bool)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// AuthenticateGoogle indicates an expected call of AuthenticateGoogle
func (mr *MockNakamaModuleMockRecorder) AuthenticateGoogle(ctx, token, username, create interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthenticateGoogle", reflect.TypeOf((*MockNakamaModule)(nil).AuthenticateGoogle), ctx, token, username, create)
}

// AuthenticateSteam mocks base method
func (m *MockNakamaModule) AuthenticateSteam(ctx context.Context, token, username string, create bool) (string, string, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthenticateSteam", ctx, token, username, create)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(bool)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// AuthenticateSteam indicates an expected call of AuthenticateSteam
func (mr *MockNakamaModuleMockRecorder) AuthenticateSteam(ctx, token, username, create interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthenticateSteam", reflect.TypeOf((*MockNakamaModule)(nil).AuthenticateSteam), ctx, token, username, create)
}

// AuthenticateTokenGenerate mocks base method
func (m *MockNakamaModule) AuthenticateTokenGenerate(userID, username string, exp int64) (string, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthenticateTokenGenerate", userID, username, exp)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// AuthenticateTokenGenerate indicates an expected call of AuthenticateTokenGenerate
func (mr *MockNakamaModuleMockRecorder) AuthenticateTokenGenerate(userID, username, exp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthenticateTokenGenerate", reflect.TypeOf((*MockNakamaModule)(nil).AuthenticateTokenGenerate), userID, username, exp)
}

// AccountGetId mocks base method
func (m *MockNakamaModule) AccountGetId(ctx context.Context, userID string) (*api.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccountGetId", ctx, userID)
	ret0, _ := ret[0].(*api.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AccountGetId indicates an expected call of AccountGetId
func (mr *MockNakamaModuleMockRecorder) AccountGetId(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccountGetId", reflect.TypeOf((*MockNakamaModule)(nil).AccountGetId), ctx, userID)
}

// AccountsGetId mocks base method
func (m *MockNakamaModule) AccountsGetId(ctx context.Context, userIDs []string) ([]*api.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccountsGetId", ctx, userIDs)
	ret0, _ := ret[0].([]*api.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AccountsGetId indicates an expected call of AccountsGetId
func (mr *MockNakamaModuleMockRecorder) AccountsGetId(ctx, userIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccountsGetId", reflect.TypeOf((*MockNakamaModule)(nil).AccountsGetId), ctx, userIDs)
}

// AccountUpdateId mocks base method
func (m *MockNakamaModule) AccountUpdateId(ctx context.Context, userID, username string, metadata map[string]interface{}, displayName, timezone, location, langTag, avatarUrl string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccountUpdateId", ctx, userID, username, metadata, displayName, timezone, location, langTag, avatarUrl)
	ret0, _ := ret[0].(error)
	return ret0
}

// AccountUpdateId indicates an expected call of AccountUpdateId
func (mr *MockNakamaModuleMockRecorder) AccountUpdateId(ctx, userID, username, metadata, displayName, timezone, location, langTag, avatarUrl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccountUpdateId", reflect.TypeOf((*MockNakamaModule)(nil).AccountUpdateId), ctx, userID, username, metadata, displayName, timezone, location, langTag, avatarUrl)
}

// UsersGetId mocks base method
func (m *MockNakamaModule) UsersGetId(ctx context.Context, userIDs []string) ([]*api.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UsersGetId", ctx, userIDs)
	ret0, _ := ret[0].([]*api.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UsersGetId indicates an expected call of UsersGetId
func (mr *MockNakamaModuleMockRecorder) UsersGetId(ctx, userIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UsersGetId", reflect.TypeOf((*MockNakamaModule)(nil).UsersGetId), ctx, userIDs)
}

// UsersGetUsername mocks base method
func (m *MockNakamaModule) UsersGetUsername(ctx context.Context, usernames []string) ([]*api.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UsersGetUsername", ctx, usernames)
	ret0, _ := ret[0].([]*api.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UsersGetUsername indicates an expected call of UsersGetUsername
func (mr *MockNakamaModuleMockRecorder) UsersGetUsername(ctx, usernames interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UsersGetUsername", reflect.TypeOf((*MockNakamaModule)(nil).UsersGetUsername), ctx, usernames)
}

// UsersBanId mocks base method
func (m *MockNakamaModule) UsersBanId(ctx context.Context, userIDs []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UsersBanId", ctx, userIDs)
	ret0, _ := ret[0].(error)
	return ret0
}

// UsersBanId indicates an expected call of UsersBanId
func (mr *MockNakamaModuleMockRecorder) UsersBanId(ctx, userIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UsersBanId", reflect.TypeOf((*MockNakamaModule)(nil).UsersBanId), ctx, userIDs)
}

// UsersUnbanId mocks base method
func (m *MockNakamaModule) UsersUnbanId(ctx context.Context, userIDs []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UsersUnbanId", ctx, userIDs)
	ret0, _ := ret[0].(error)
	return ret0
}

// UsersUnbanId indicates an expected call of UsersUnbanId
func (mr *MockNakamaModuleMockRecorder) UsersUnbanId(ctx, userIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UsersUnbanId", reflect.TypeOf((*MockNakamaModule)(nil).UsersUnbanId), ctx, userIDs)
}

// StreamUserList mocks base method
func (m *MockNakamaModule) StreamUserList(mode uint8, subject, subcontext, label string, includeHidden, includeNotHidden bool) ([]x.Presence, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StreamUserList", mode, subject, subcontext, label, includeHidden, includeNotHidden)
	ret0, _ := ret[0].([]x.Presence)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StreamUserList indicates an expected call of StreamUserList
func (mr *MockNakamaModuleMockRecorder) StreamUserList(mode, subject, subcontext, label, includeHidden, includeNotHidden interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamUserList", reflect.TypeOf((*MockNakamaModule)(nil).StreamUserList), mode, subject, subcontext, label, includeHidden, includeNotHidden)
}

// StreamUserGet mocks base method
func (m *MockNakamaModule) StreamUserGet(mode uint8, subject, subcontext, label, userID, sessionID string) (x.PresenceMeta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StreamUserGet", mode, subject, subcontext, label, userID, sessionID)
	ret0, _ := ret[0].(x.PresenceMeta)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StreamUserGet indicates an expected call of StreamUserGet
func (mr *MockNakamaModuleMockRecorder) StreamUserGet(mode, subject, subcontext, label, userID, sessionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamUserGet", reflect.TypeOf((*MockNakamaModule)(nil).StreamUserGet), mode, subject, subcontext, label, userID, sessionID)
}

// StreamUserJoin mocks base method
func (m *MockNakamaModule) StreamUserJoin(mode uint8, subject, subcontext, label, userID, sessionID string, hidden, persistence bool, status string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StreamUserJoin", mode, subject, subcontext, label, userID, sessionID, hidden, persistence, status)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StreamUserJoin indicates an expected call of StreamUserJoin
func (mr *MockNakamaModuleMockRecorder) StreamUserJoin(mode, subject, subcontext, label, userID, sessionID, hidden, persistence, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamUserJoin", reflect.TypeOf((*MockNakamaModule)(nil).StreamUserJoin), mode, subject, subcontext, label, userID, sessionID, hidden, persistence, status)
}

// StreamUserUpdate mocks base method
func (m *MockNakamaModule) StreamUserUpdate(mode uint8, subject, subcontext, label, userID, sessionID string, hidden, persistence bool, status string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StreamUserUpdate", mode, subject, subcontext, label, userID, sessionID, hidden, persistence, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// StreamUserUpdate indicates an expected call of StreamUserUpdate
func (mr *MockNakamaModuleMockRecorder) StreamUserUpdate(mode, subject, subcontext, label, userID, sessionID, hidden, persistence, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamUserUpdate", reflect.TypeOf((*MockNakamaModule)(nil).StreamUserUpdate), mode, subject, subcontext, label, userID, sessionID, hidden, persistence, status)
}

// StreamUserLeave mocks base method
func (m *MockNakamaModule) StreamUserLeave(mode uint8, subject, subcontext, label, userID, sessionID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StreamUserLeave", mode, subject, subcontext, label, userID, sessionID)
	ret0, _ := ret[0].(error)
	return ret0
}

// StreamUserLeave indicates an expected call of StreamUserLeave
func (mr *MockNakamaModuleMockRecorder) StreamUserLeave(mode, subject, subcontext, label, userID, sessionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamUserLeave", reflect.TypeOf((*MockNakamaModule)(nil).StreamUserLeave), mode, subject, subcontext, label, userID, sessionID)
}

// StreamCount mocks base method
func (m *MockNakamaModule) StreamCount(mode uint8, subject, subcontext, label string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StreamCount", mode, subject, subcontext, label)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StreamCount indicates an expected call of StreamCount
func (mr *MockNakamaModuleMockRecorder) StreamCount(mode, subject, subcontext, label interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamCount", reflect.TypeOf((*MockNakamaModule)(nil).StreamCount), mode, subject, subcontext, label)
}

// StreamClose mocks base method
func (m *MockNakamaModule) StreamClose(mode uint8, subject, subcontext, label string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StreamClose", mode, subject, subcontext, label)
	ret0, _ := ret[0].(error)
	return ret0
}

// StreamClose indicates an expected call of StreamClose
func (mr *MockNakamaModuleMockRecorder) StreamClose(mode, subject, subcontext, label interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamClose", reflect.TypeOf((*MockNakamaModule)(nil).StreamClose), mode, subject, subcontext, label)
}

// StreamSend mocks base method
func (m *MockNakamaModule) StreamSend(mode uint8, subject, subcontext, label, data string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StreamSend", mode, subject, subcontext, label, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// StreamSend indicates an expected call of StreamSend
func (mr *MockNakamaModuleMockRecorder) StreamSend(mode, subject, subcontext, label, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamSend", reflect.TypeOf((*MockNakamaModule)(nil).StreamSend), mode, subject, subcontext, label, data)
}

// StreamSendRaw mocks base method
func (m *MockNakamaModule) StreamSendRaw(mode uint8, subject, subcontext, label string, msg *rtapi.Envelope) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StreamSendRaw", mode, subject, subcontext, label, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// StreamSendRaw indicates an expected call of StreamSendRaw
func (mr *MockNakamaModuleMockRecorder) StreamSendRaw(mode, subject, subcontext, label, msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamSendRaw", reflect.TypeOf((*MockNakamaModule)(nil).StreamSendRaw), mode, subject, subcontext, label, msg)
}

// MatchCreate mocks base method
func (m *MockNakamaModule) MatchCreate(ctx context.Context, module string, params map[string]interface{}) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MatchCreate", ctx, module, params)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MatchCreate indicates an expected call of MatchCreate
func (mr *MockNakamaModuleMockRecorder) MatchCreate(ctx, module, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MatchCreate", reflect.TypeOf((*MockNakamaModule)(nil).MatchCreate), ctx, module, params)
}

// MatchList mocks base method
func (m *MockNakamaModule) MatchList(ctx context.Context, limit int, authoritative bool, label string, minSize, maxSize int, query string) ([]*api.Match, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MatchList", ctx, limit, authoritative, label, minSize, maxSize, query)
	ret0, _ := ret[0].([]*api.Match)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MatchList indicates an expected call of MatchList
func (mr *MockNakamaModuleMockRecorder) MatchList(ctx, limit, authoritative, label, minSize, maxSize, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MatchList", reflect.TypeOf((*MockNakamaModule)(nil).MatchList), ctx, limit, authoritative, label, minSize, maxSize, query)
}

// NotificationSend mocks base method
func (m *MockNakamaModule) NotificationSend(ctx context.Context, userID, subject string, content map[string]interface{}, code int, sender string, persistent bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NotificationSend", ctx, userID, subject, content, code, sender, persistent)
	ret0, _ := ret[0].(error)
	return ret0
}

// NotificationSend indicates an expected call of NotificationSend
func (mr *MockNakamaModuleMockRecorder) NotificationSend(ctx, userID, subject, content, code, sender, persistent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotificationSend", reflect.TypeOf((*MockNakamaModule)(nil).NotificationSend), ctx, userID, subject, content, code, sender, persistent)
}

// NotificationsSend mocks base method
func (m *MockNakamaModule) NotificationsSend(ctx context.Context, notifications []*x.NotificationSend) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NotificationsSend", ctx, notifications)
	ret0, _ := ret[0].(error)
	return ret0
}

// NotificationsSend indicates an expected call of NotificationsSend
func (mr *MockNakamaModuleMockRecorder) NotificationsSend(ctx, notifications interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotificationsSend", reflect.TypeOf((*MockNakamaModule)(nil).NotificationsSend), ctx, notifications)
}

// WalletUpdate mocks base method
func (m *MockNakamaModule) WalletUpdate(ctx context.Context, userID string, changeset, metadata map[string]interface{}, updateLedger bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WalletUpdate", ctx, userID, changeset, metadata, updateLedger)
	ret0, _ := ret[0].(error)
	return ret0
}

// WalletUpdate indicates an expected call of WalletUpdate
func (mr *MockNakamaModuleMockRecorder) WalletUpdate(ctx, userID, changeset, metadata, updateLedger interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WalletUpdate", reflect.TypeOf((*MockNakamaModule)(nil).WalletUpdate), ctx, userID, changeset, metadata, updateLedger)
}

// WalletsUpdate mocks base method
func (m *MockNakamaModule) WalletsUpdate(ctx context.Context, updates []*x.WalletUpdate, updateLedger bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WalletsUpdate", ctx, updates, updateLedger)
	ret0, _ := ret[0].(error)
	return ret0
}

// WalletsUpdate indicates an expected call of WalletsUpdate
func (mr *MockNakamaModuleMockRecorder) WalletsUpdate(ctx, updates, updateLedger interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WalletsUpdate", reflect.TypeOf((*MockNakamaModule)(nil).WalletsUpdate), ctx, updates, updateLedger)
}

// WalletLedgerUpdate mocks base method
func (m *MockNakamaModule) WalletLedgerUpdate(ctx context.Context, itemID string, metadata map[string]interface{}) (x.WalletLedgerItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WalletLedgerUpdate", ctx, itemID, metadata)
	ret0, _ := ret[0].(x.WalletLedgerItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WalletLedgerUpdate indicates an expected call of WalletLedgerUpdate
func (mr *MockNakamaModuleMockRecorder) WalletLedgerUpdate(ctx, itemID, metadata interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WalletLedgerUpdate", reflect.TypeOf((*MockNakamaModule)(nil).WalletLedgerUpdate), ctx, itemID, metadata)
}

// WalletLedgerList mocks base method
func (m *MockNakamaModule) WalletLedgerList(ctx context.Context, userID string) ([]x.WalletLedgerItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WalletLedgerList", ctx, userID)
	ret0, _ := ret[0].([]x.WalletLedgerItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WalletLedgerList indicates an expected call of WalletLedgerList
func (mr *MockNakamaModuleMockRecorder) WalletLedgerList(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WalletLedgerList", reflect.TypeOf((*MockNakamaModule)(nil).WalletLedgerList), ctx, userID)
}

// StorageList mocks base method
func (m *MockNakamaModule) StorageList(ctx context.Context, userID, collection string, limit int, cursor string) ([]*api.StorageObject, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StorageList", ctx, userID, collection, limit, cursor)
	ret0, _ := ret[0].([]*api.StorageObject)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// StorageList indicates an expected call of StorageList
func (mr *MockNakamaModuleMockRecorder) StorageList(ctx, userID, collection, limit, cursor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StorageList", reflect.TypeOf((*MockNakamaModule)(nil).StorageList), ctx, userID, collection, limit, cursor)
}

// StorageRead mocks base method
func (m *MockNakamaModule) StorageRead(ctx context.Context, reads []*x.StorageRead) ([]*api.StorageObject, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StorageRead", ctx, reads)
	ret0, _ := ret[0].([]*api.StorageObject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StorageRead indicates an expected call of StorageRead
func (mr *MockNakamaModuleMockRecorder) StorageRead(ctx, reads interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StorageRead", reflect.TypeOf((*MockNakamaModule)(nil).StorageRead), ctx, reads)
}

// StorageWrite mocks base method
func (m *MockNakamaModule) StorageWrite(ctx context.Context, writes []*x.StorageWrite) ([]*api.StorageObjectAck, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StorageWrite", ctx, writes)
	ret0, _ := ret[0].([]*api.StorageObjectAck)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StorageWrite indicates an expected call of StorageWrite
func (mr *MockNakamaModuleMockRecorder) StorageWrite(ctx, writes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StorageWrite", reflect.TypeOf((*MockNakamaModule)(nil).StorageWrite), ctx, writes)
}

// StorageDelete mocks base method
func (m *MockNakamaModule) StorageDelete(ctx context.Context, deletes []*x.StorageDelete) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StorageDelete", ctx, deletes)
	ret0, _ := ret[0].(error)
	return ret0
}

// StorageDelete indicates an expected call of StorageDelete
func (mr *MockNakamaModuleMockRecorder) StorageDelete(ctx, deletes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StorageDelete", reflect.TypeOf((*MockNakamaModule)(nil).StorageDelete), ctx, deletes)
}

// LeaderboardCreate mocks base method
func (m *MockNakamaModule) LeaderboardCreate(ctx context.Context, id string, authoritative bool, sortOrder, operator, resetSchedule string, metadata map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LeaderboardCreate", ctx, id, authoritative, sortOrder, operator, resetSchedule, metadata)
	ret0, _ := ret[0].(error)
	return ret0
}

// LeaderboardCreate indicates an expected call of LeaderboardCreate
func (mr *MockNakamaModuleMockRecorder) LeaderboardCreate(ctx, id, authoritative, sortOrder, operator, resetSchedule, metadata interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LeaderboardCreate", reflect.TypeOf((*MockNakamaModule)(nil).LeaderboardCreate), ctx, id, authoritative, sortOrder, operator, resetSchedule, metadata)
}

// LeaderboardDelete mocks base method
func (m *MockNakamaModule) LeaderboardDelete(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LeaderboardDelete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// LeaderboardDelete indicates an expected call of LeaderboardDelete
func (mr *MockNakamaModuleMockRecorder) LeaderboardDelete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LeaderboardDelete", reflect.TypeOf((*MockNakamaModule)(nil).LeaderboardDelete), ctx, id)
}

// LeaderboardRecordsList mocks base method
func (m *MockNakamaModule) LeaderboardRecordsList(ctx context.Context, id string, ownerIDs []string, limit int, cursor string, expiry int64) ([]*api.LeaderboardRecord, []*api.LeaderboardRecord, string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LeaderboardRecordsList", ctx, id, ownerIDs, limit, cursor, expiry)
	ret0, _ := ret[0].([]*api.LeaderboardRecord)
	ret1, _ := ret[1].([]*api.LeaderboardRecord)
	ret2, _ := ret[2].(string)
	ret3, _ := ret[3].(string)
	ret4, _ := ret[4].(error)
	return ret0, ret1, ret2, ret3, ret4
}

// LeaderboardRecordsList indicates an expected call of LeaderboardRecordsList
func (mr *MockNakamaModuleMockRecorder) LeaderboardRecordsList(ctx, id, ownerIDs, limit, cursor, expiry interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LeaderboardRecordsList", reflect.TypeOf((*MockNakamaModule)(nil).LeaderboardRecordsList), ctx, id, ownerIDs, limit, cursor, expiry)
}

// LeaderboardRecordWrite mocks base method
func (m *MockNakamaModule) LeaderboardRecordWrite(ctx context.Context, id, ownerID, username string, score, subscore int64, metadata map[string]interface{}) (*api.LeaderboardRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LeaderboardRecordWrite", ctx, id, ownerID, username, score, subscore, metadata)
	ret0, _ := ret[0].(*api.LeaderboardRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LeaderboardRecordWrite indicates an expected call of LeaderboardRecordWrite
func (mr *MockNakamaModuleMockRecorder) LeaderboardRecordWrite(ctx, id, ownerID, username, score, subscore, metadata interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LeaderboardRecordWrite", reflect.TypeOf((*MockNakamaModule)(nil).LeaderboardRecordWrite), ctx, id, ownerID, username, score, subscore, metadata)
}

// LeaderboardRecordDelete mocks base method
func (m *MockNakamaModule) LeaderboardRecordDelete(ctx context.Context, id, ownerID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LeaderboardRecordDelete", ctx, id, ownerID)
	ret0, _ := ret[0].(error)
	return ret0
}

// LeaderboardRecordDelete indicates an expected call of LeaderboardRecordDelete
func (mr *MockNakamaModuleMockRecorder) LeaderboardRecordDelete(ctx, id, ownerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LeaderboardRecordDelete", reflect.TypeOf((*MockNakamaModule)(nil).LeaderboardRecordDelete), ctx, id, ownerID)
}

// TournamentCreate mocks base method
func (m *MockNakamaModule) TournamentCreate(ctx context.Context, id, sortOrder, operator, resetSchedule string, metadata map[string]interface{}, title, description string, category, startTime, endTime, duration, maxSize, maxNumScore int, joinRequired bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TournamentCreate", ctx, id, sortOrder, operator, resetSchedule, metadata, title, description, category, startTime, endTime, duration, maxSize, maxNumScore, joinRequired)
	ret0, _ := ret[0].(error)
	return ret0
}

// TournamentCreate indicates an expected call of TournamentCreate
func (mr *MockNakamaModuleMockRecorder) TournamentCreate(ctx, id, sortOrder, operator, resetSchedule, metadata, title, description, category, startTime, endTime, duration, maxSize, maxNumScore, joinRequired interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TournamentCreate", reflect.TypeOf((*MockNakamaModule)(nil).TournamentCreate), ctx, id, sortOrder, operator, resetSchedule, metadata, title, description, category, startTime, endTime, duration, maxSize, maxNumScore, joinRequired)
}

// TournamentDelete mocks base method
func (m *MockNakamaModule) TournamentDelete(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TournamentDelete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// TournamentDelete indicates an expected call of TournamentDelete
func (mr *MockNakamaModuleMockRecorder) TournamentDelete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TournamentDelete", reflect.TypeOf((*MockNakamaModule)(nil).TournamentDelete), ctx, id)
}

// TournamentAddAttempt mocks base method
func (m *MockNakamaModule) TournamentAddAttempt(ctx context.Context, id, ownerID string, count int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TournamentAddAttempt", ctx, id, ownerID, count)
	ret0, _ := ret[0].(error)
	return ret0
}

// TournamentAddAttempt indicates an expected call of TournamentAddAttempt
func (mr *MockNakamaModuleMockRecorder) TournamentAddAttempt(ctx, id, ownerID, count interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TournamentAddAttempt", reflect.TypeOf((*MockNakamaModule)(nil).TournamentAddAttempt), ctx, id, ownerID, count)
}

// TournamentJoin mocks base method
func (m *MockNakamaModule) TournamentJoin(ctx context.Context, id, ownerID, username string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TournamentJoin", ctx, id, ownerID, username)
	ret0, _ := ret[0].(error)
	return ret0
}

// TournamentJoin indicates an expected call of TournamentJoin
func (mr *MockNakamaModuleMockRecorder) TournamentJoin(ctx, id, ownerID, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TournamentJoin", reflect.TypeOf((*MockNakamaModule)(nil).TournamentJoin), ctx, id, ownerID, username)
}

// TournamentList mocks base method
func (m *MockNakamaModule) TournamentList(ctx context.Context, categoryStart, categoryEnd, startTime, endTime, limit int, cursor string) (*api.TournamentList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TournamentList", ctx, categoryStart, categoryEnd, startTime, endTime, limit, cursor)
	ret0, _ := ret[0].(*api.TournamentList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TournamentList indicates an expected call of TournamentList
func (mr *MockNakamaModuleMockRecorder) TournamentList(ctx, categoryStart, categoryEnd, startTime, endTime, limit, cursor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TournamentList", reflect.TypeOf((*MockNakamaModule)(nil).TournamentList), ctx, categoryStart, categoryEnd, startTime, endTime, limit, cursor)
}

// TournamentRecordWrite mocks base method
func (m *MockNakamaModule) TournamentRecordWrite(ctx context.Context, id, ownerID, username string, score, subscore int64, metadata map[string]interface{}) (*api.LeaderboardRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TournamentRecordWrite", ctx, id, ownerID, username, score, subscore, metadata)
	ret0, _ := ret[0].(*api.LeaderboardRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TournamentRecordWrite indicates an expected call of TournamentRecordWrite
func (mr *MockNakamaModuleMockRecorder) TournamentRecordWrite(ctx, id, ownerID, username, score, subscore, metadata interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TournamentRecordWrite", reflect.TypeOf((*MockNakamaModule)(nil).TournamentRecordWrite), ctx, id, ownerID, username, score, subscore, metadata)
}

// TournamentRecordsHaystack mocks base method
func (m *MockNakamaModule) TournamentRecordsHaystack(ctx context.Context, id, ownerID string, limit int) ([]*api.LeaderboardRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TournamentRecordsHaystack", ctx, id, ownerID, limit)
	ret0, _ := ret[0].([]*api.LeaderboardRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TournamentRecordsHaystack indicates an expected call of TournamentRecordsHaystack
func (mr *MockNakamaModuleMockRecorder) TournamentRecordsHaystack(ctx, id, ownerID, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TournamentRecordsHaystack", reflect.TypeOf((*MockNakamaModule)(nil).TournamentRecordsHaystack), ctx, id, ownerID, limit)
}

// GroupsGetId mocks base method
func (m *MockNakamaModule) GroupsGetId(ctx context.Context, groupIDs []string) ([]*api.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GroupsGetId", ctx, groupIDs)
	ret0, _ := ret[0].([]*api.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GroupsGetId indicates an expected call of GroupsGetId
func (mr *MockNakamaModuleMockRecorder) GroupsGetId(ctx, groupIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GroupsGetId", reflect.TypeOf((*MockNakamaModule)(nil).GroupsGetId), ctx, groupIDs)
}

// GroupCreate mocks base method
func (m *MockNakamaModule) GroupCreate(ctx context.Context, userID, name, creatorID, langTag, description, avatarUrl string, open bool, metadata map[string]interface{}, maxCount int) (*api.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GroupCreate", ctx, userID, name, creatorID, langTag, description, avatarUrl, open, metadata, maxCount)
	ret0, _ := ret[0].(*api.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GroupCreate indicates an expected call of GroupCreate
func (mr *MockNakamaModuleMockRecorder) GroupCreate(ctx, userID, name, creatorID, langTag, description, avatarUrl, open, metadata, maxCount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GroupCreate", reflect.TypeOf((*MockNakamaModule)(nil).GroupCreate), ctx, userID, name, creatorID, langTag, description, avatarUrl, open, metadata, maxCount)
}

// GroupUpdate mocks base method
func (m *MockNakamaModule) GroupUpdate(ctx context.Context, id, name, creatorID, langTag, description, avatarUrl string, open bool, metadata map[string]interface{}, maxCount int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GroupUpdate", ctx, id, name, creatorID, langTag, description, avatarUrl, open, metadata, maxCount)
	ret0, _ := ret[0].(error)
	return ret0
}

// GroupUpdate indicates an expected call of GroupUpdate
func (mr *MockNakamaModuleMockRecorder) GroupUpdate(ctx, id, name, creatorID, langTag, description, avatarUrl, open, metadata, maxCount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GroupUpdate", reflect.TypeOf((*MockNakamaModule)(nil).GroupUpdate), ctx, id, name, creatorID, langTag, description, avatarUrl, open, metadata, maxCount)
}

// GroupDelete mocks base method
func (m *MockNakamaModule) GroupDelete(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GroupDelete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// GroupDelete indicates an expected call of GroupDelete
func (mr *MockNakamaModuleMockRecorder) GroupDelete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GroupDelete", reflect.TypeOf((*MockNakamaModule)(nil).GroupDelete), ctx, id)
}

// GroupUsersKick mocks base method
func (m *MockNakamaModule) GroupUsersKick(ctx context.Context, groupID string, userIDs []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GroupUsersKick", ctx, groupID, userIDs)
	ret0, _ := ret[0].(error)
	return ret0
}

// GroupUsersKick indicates an expected call of GroupUsersKick
func (mr *MockNakamaModuleMockRecorder) GroupUsersKick(ctx, groupID, userIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GroupUsersKick", reflect.TypeOf((*MockNakamaModule)(nil).GroupUsersKick), ctx, groupID, userIDs)
}

// GroupUsersList mocks base method
func (m *MockNakamaModule) GroupUsersList(ctx context.Context, id string) ([]*api.GroupUserList_GroupUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GroupUsersList", ctx, id)
	ret0, _ := ret[0].([]*api.GroupUserList_GroupUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GroupUsersList indicates an expected call of GroupUsersList
func (mr *MockNakamaModuleMockRecorder) GroupUsersList(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GroupUsersList", reflect.TypeOf((*MockNakamaModule)(nil).GroupUsersList), ctx, id)
}

// UserGroupsList mocks base method
func (m *MockNakamaModule) UserGroupsList(ctx context.Context, userID string) ([]*api.UserGroupList_UserGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserGroupsList", ctx, userID)
	ret0, _ := ret[0].([]*api.UserGroupList_UserGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserGroupsList indicates an expected call of UserGroupsList
func (mr *MockNakamaModuleMockRecorder) UserGroupsList(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserGroupsList", reflect.TypeOf((*MockNakamaModule)(nil).UserGroupsList), ctx, userID)
}
